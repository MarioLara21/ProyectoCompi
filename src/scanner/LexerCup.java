/* The following code was generated by JFlex 1.4.3 on 9/11/23, 20:44 */

package scanner;
import java_cup.runtime.Symbol;
import java.io.*;
/**
 *
 * @author Mario Lara
 * @author Andrey Sanchez
 * @author Jonnathan Villalobos
 */

class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 27,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    49, 48, 47, 46, 48, 48, 48,  0, 28, 30, 29, 34,  3, 35, 42, 26, 
     2, 44, 44, 44, 44, 44, 44, 44, 44, 44, 41, 33, 38, 37, 36,  0, 
    48,  1,  1,  1,  1, 45,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 39,  0, 40,  0,  1, 
    48,  4,  7, 15, 18,  8, 20,  9, 17, 10,  1, 23, 13, 24, 11, 12, 
    22,  1,  5, 16, 14, 21, 25, 19, 43,  6,  1, 31,  0, 32, 48,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\23\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\1\1\2\3\1"+
    "\1\0\1\1\1\0\1\24\1\2\1\1\12\0\1\25"+
    "\1\26\2\0\1\27\1\30\4\0\1\31\10\0\1\32"+
    "\14\0\1\3\1\33\1\0\1\1\1\0\1\34\1\0"+
    "\1\3\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\1\2\0\1\2\1\0\1\1"+
    "\2\2\1\1\1\0\1\47\6\0\1\50\4\0\1\51"+
    "\1\52\1\53\10\0\1\54\2\0\1\55\6\0\1\56"+
    "\4\0\1\57\1\60\1\0\1\61\1\62\1\1\1\0"+
    "\1\63\1\1\1\0\1\64\1\65\2\0\1\66\2\0"+
    "\1\67\1\70\4\0\1\71\1\72\1\73\1\74\1\0"+
    "\1\75\4\0\1\76\2\0\1\77\6\0\1\3\1\1"+
    "\1\100\2\0\1\101\3\0\1\102\1\0\1\103\3\0"+
    "\1\104\1\105\1\106\2\0\1\107\3\0\1\110\1\111"+
    "\1\0\1\112\1\113\1\0\1\114\1\0\1\115\2\0"+
    "\1\116\2\0\1\117\1\120\1\0\1\121\1\0\1\122"+
    "\1\0\1\123\1\124\1\0\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\62\0\u0546\0\62\0\62\0\u0578"+
    "\0\u05aa\0\u05dc\0\62\0\u060e\0\62\0\62\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\144\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\144\0\u0abe"+
    "\0\u0af0\0\144\0\144\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\144"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\62\0\u1036"+
    "\0\u1068\0\u076c\0\62\0\u0546\0\u0546\0\u076c\0\62\0\u076c"+
    "\0\62\0\u109a\0\62\0\62\0\62\0\u10cc\0\62\0\u0672"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\62\0\u11f8\0\u122a"+
    "\0\u125c\0\144\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\144\0\u13ba\0\u13ec\0\u141e\0\u1450\0\144\0\144\0\144"+
    "\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0"+
    "\0\144\0\u1612\0\u1644\0\144\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\144"+
    "\0\144\0\u189c\0\62\0\62\0\u18ce\0\u18ce\0\144\0\u1900"+
    "\0\u1932\0\144\0\144\0\u1964\0\u1996\0\144\0\u19c8\0\u19fa"+
    "\0\144\0\144\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\144\0\144"+
    "\0\144\0\144\0\u1af4\0\144\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\144\0\u1bee\0\u1c20\0\144\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u1d4c\0\u1036\0\u1162\0\144\0\u1d7e\0\u1db0\0\144"+
    "\0\u1de2\0\u1e14\0\u1e46\0\144\0\u1e78\0\144\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\144\0\144\0\144\0\u1f40\0\u1f72\0\144\0\u1fa4"+
    "\0\u1fd6\0\u2008\0\144\0\144\0\u203a\0\144\0\144\0\u206c"+
    "\0\144\0\u209e\0\144\0\u20d0\0\u2102\0\144\0\u2134\0\u2166"+
    "\0\144\0\144\0\u2198\0\144\0\u21ca\0\144\0\u21fc\0\144"+
    "\0\144\0\u222e\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\3\1\22\1\23\1\24\1\25\1\26\1\3"+
    "\1\27\1\30\1\31\1\5\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\3\1\53\1\54"+
    "\1\55\1\5\63\0\1\56\2\0\26\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\61\1\62\1\0\26\61\20\0"+
    "\1\63\1\61\1\62\1\61\7\0\1\5\27\0\1\5"+
    "\25\0\1\5\1\0\1\56\2\0\1\56\1\64\5\56"+
    "\1\65\16\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\4\56\1\66\21\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\2\56\1\67\1\56\1\70\3\56"+
    "\1\71\15\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\7\56\1\72\1\56\1\73\14\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\10\56\1\74\1\75"+
    "\14\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\7\56\1\76\10\56\1\77\5\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\6\56\1\100\1\56\1\101"+
    "\15\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\1\56\1\102\16\56\1\103\5\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\1\104\7\56\1\105\15\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\1\56"+
    "\1\106\1\107\5\56\1\110\4\56\1\111\10\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\1\112\7\56"+
    "\1\113\4\56\1\114\10\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\4\56\1\115\5\56\1\116\2\56"+
    "\1\117\10\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\6\56\1\120\1\56\1\121\15\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\1\56\1\122\4\56"+
    "\1\123\6\56\1\124\10\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\1\125\5\56\1\126\1\56\1\127"+
    "\10\56\1\130\4\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\7\56\1\131\16\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\1\132\1\133\24\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\10\56\1\134"+
    "\15\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\1\135\25\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\32\0\1\136"+
    "\12\0\1\137\51\0\1\140\25\0\1\141\2\0\26\141"+
    "\3\0\1\142\4\0\2\142\1\0\1\143\5\0\1\141"+
    "\1\0\1\141\1\142\1\0\1\142\1\0\40\144\1\145"+
    "\21\144\1\0\1\141\2\0\26\141\3\0\1\142\4\0"+
    "\1\146\1\142\1\0\1\147\5\0\1\141\1\0\1\141"+
    "\1\142\1\0\1\142\2\0\1\141\2\0\26\141\3\0"+
    "\1\142\4\0\1\142\1\150\1\0\1\151\5\0\1\141"+
    "\1\0\1\141\1\142\1\0\1\142\45\0\1\152\1\153"+
    "\60\0\1\154\1\155\1\156\60\0\1\157\16\0\1\160"+
    "\5\0\1\161\43\0\1\160\1\161\5\0\1\56\2\0"+
    "\10\56\1\162\15\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\61\1\52\1\0\26\61\20\0\1\63\1\61\1\52"+
    "\1\61\5\0\1\141\1\163\1\0\26\141\3\0\1\142"+
    "\4\0\2\142\7\0\1\141\1\163\1\141\1\142\1\0"+
    "\1\142\1\0\1\164\1\165\2\164\26\165\1\164\1\0"+
    "\17\164\1\165\1\164\1\165\1\164\1\166\2\164\1\0"+
    "\1\141\2\0\26\141\3\0\1\142\4\0\2\142\7\0"+
    "\1\141\1\0\1\141\1\142\1\0\1\142\36\0\1\57"+
    "\4\0\2\57\12\0\1\57\1\0\1\57\2\0\1\60"+
    "\2\0\26\60\21\0\1\60\1\0\1\60\1\0\1\2"+
    "\1\0\1\60\1\0\1\61\2\0\26\61\21\0\1\61"+
    "\1\0\1\61\5\0\1\61\1\62\1\0\26\61\20\0"+
    "\1\2\1\61\1\62\1\61\6\0\1\167\5\0\1\170"+
    "\43\0\1\167\1\170\5\0\1\56\2\0\1\56\1\171"+
    "\24\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\16\56\1\172\7\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\1\173\12\56\1\174\6\56\1\175\3\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\12\56"+
    "\1\176\13\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\5\56\1\177\20\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\10\56\1\200\15\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\16\56\1\201\7\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\14\56"+
    "\1\202\11\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\12\56\1\203\13\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\10\56\1\204\15\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\11\56\1\205\1\206"+
    "\13\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\11\56\1\207\14\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\12\56\1\210\13\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\3\56\1\211\22\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\7\56\1\212"+
    "\16\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\21\56\1\213\4\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\22\56\1\214\3\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\4\56\1\215\21\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\14\56\1\216"+
    "\11\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\7\56\1\217\16\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\1\220\25\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\12\56\1\221\13\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\1\56\1\222\24\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\10\56"+
    "\1\223\15\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\25\56\1\224\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\17\56\1\225\6\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\6\56\1\226\17\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\12\56\1\227"+
    "\13\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\6\56\1\230\17\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\11\56\1\231\14\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\11\56\1\232\14\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\1\56\1\233"+
    "\24\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\7\56\1\234\16\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\12\56\1\235\13\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\13\56\1\236\12\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\10\56\1\237"+
    "\15\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\16\56\1\240\7\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\1\56\1\241\24\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\33\136\1\0\26\136\35\140\1\242\24\140\1\0"+
    "\1\141\2\0\26\141\21\0\1\141\1\0\1\141\51\0"+
    "\1\243\61\0\1\244\16\0\1\245\37\0\2\246\10\0"+
    "\1\245\6\0\1\56\2\0\1\56\1\247\24\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\2\0\1\163\51\0\1\163\5\0"+
    "\33\164\1\0\23\164\1\166\3\164\1\165\2\164\26\165"+
    "\1\164\1\0\17\164\1\165\1\164\1\165\1\164\1\166"+
    "\1\164\1\165\2\0\1\167\5\0\1\250\43\0\1\167"+
    "\1\250\46\0\2\2\17\0\1\56\2\0\1\251\25\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\11\56"+
    "\1\252\4\56\1\253\7\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\10\56\1\254\15\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\4\56\1\255\21\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\4\56"+
    "\1\256\21\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\6\56\1\257\17\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\11\56\1\260\14\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\4\56\1\261\21\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\10\56"+
    "\1\262\15\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\3\56\1\263\22\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\6\56\1\264\17\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\4\56\1\265\21\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\5\56"+
    "\1\266\20\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\4\56\1\267\21\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\4\56\1\270\21\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\7\56\1\271\16\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\4\56"+
    "\1\272\21\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\14\56\1\273\11\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\1\56\1\274\24\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\6\56\1\275\17\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\1\56"+
    "\1\276\24\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\7\56\1\277\16\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\12\56\1\300\13\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\15\56\1\301\10\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\11\56"+
    "\1\302\14\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\14\56\1\303\11\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\4\56\1\304\21\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\17\56\1\305\6\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\13\56"+
    "\1\306\12\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\6\56\1\307\17\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\23\56\1\310\2\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\5\56\1\311\5\56"+
    "\1\312\12\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\35\140\1\242"+
    "\1\313\23\140\2\0\1\245\51\0\1\245\7\0\1\163"+
    "\37\0\2\314\10\0\1\163\6\0\1\56\2\0\2\56"+
    "\1\315\23\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\1\56\1\316\24\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\1\317\25\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\7\56\1\320\16\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\4\56\1\321"+
    "\21\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\1\322\25\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\7\56\1\323\16\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\11\56\1\324\14\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\6\56\1\325\17\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\12\56"+
    "\1\326\13\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\7\56\1\327\16\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\12\56\1\330\13\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\12\56\1\331\13\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\4\56"+
    "\1\332\21\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\4\56\1\333\21\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\4\56\1\334\21\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\1\335\25\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\12\56\1\336"+
    "\13\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\11\56\1\337\14\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\4\56\1\340\21\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\1\56\1\341\24\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\4\56\1\342"+
    "\21\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\16\56\1\343\7\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\12\56\1\344\13\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\1\345\25\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\11\56\1\346\14\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\4\56"+
    "\1\347\21\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\7\56\1\350\16\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\5\56\1\351\20\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\6\56\1\352\17\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\10\56"+
    "\1\353\15\56\3\0\1\57\4\0\2\57\7\0\1\56"+
    "\1\0\1\56\1\57\1\2\1\57\1\60\1\0\1\56"+
    "\2\0\1\56\1\354\24\56\3\0\1\57\4\0\2\57"+
    "\7\0\1\56\1\0\1\56\1\57\1\2\1\57\1\60"+
    "\1\0\1\56\2\0\6\56\1\355\17\56\3\0\1\57"+
    "\4\0\2\57\7\0\1\56\1\0\1\56\1\57\1\2"+
    "\1\57\1\60\1\0\1\56\2\0\16\56\1\356\7\56"+
    "\3\0\1\57\4\0\2\57\7\0\1\56\1\0\1\56"+
    "\1\57\1\2\1\57\1\60\1\0\1\56\2\0\1\357"+
    "\25\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\16\56\1\360\7\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\7\56\1\361\16\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\12\56\1\362\13\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\7\56\1\363"+
    "\16\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\16\56\1\364\7\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\10\56\1\365\15\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\24\56\1\366\1\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\21\56\1\367"+
    "\4\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60\1\0\1\56\2\0"+
    "\12\56\1\370\13\56\3\0\1\57\4\0\2\57\7\0"+
    "\1\56\1\0\1\56\1\57\1\2\1\57\1\60\1\0"+
    "\1\56\2\0\7\56\1\371\16\56\3\0\1\57\4\0"+
    "\2\57\7\0\1\56\1\0\1\56\1\57\1\2\1\57"+
    "\1\60\1\0\1\56\2\0\1\56\1\372\24\56\3\0"+
    "\1\57\4\0\2\57\7\0\1\56\1\0\1\56\1\57"+
    "\1\2\1\57\1\60\1\0\1\56\2\0\4\56\1\373"+
    "\21\56\3\0\1\57\4\0\2\57\7\0\1\56\1\0"+
    "\1\56\1\57\1\2\1\57\1\60";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\1\11\1\1\2\11\3\1\1\11"+
    "\1\1\2\11\7\1\1\0\1\1\1\0\3\1\12\0"+
    "\2\1\2\0\2\1\4\0\1\1\10\0\1\1\14\0"+
    "\1\1\1\11\1\0\1\1\1\0\1\11\1\0\2\1"+
    "\1\11\1\1\1\11\1\1\3\11\1\1\1\11\1\1"+
    "\2\0\1\1\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\6\0\1\1\4\0\3\1\10\0\1\1\2\0\1\1"+
    "\6\0\1\1\4\0\2\1\1\0\2\11\1\1\1\0"+
    "\2\1\1\0\2\1\2\0\1\1\2\0\2\1\4\0"+
    "\4\1\1\0\1\1\4\0\1\1\2\0\1\1\6\0"+
    "\3\1\2\0\1\1\3\0\1\1\1\0\1\1\3\0"+
    "\3\1\2\0\1\1\3\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type,Object value){
        return new Symbol(type,yyline,yycolumn,value);
};
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
};   
    public int GetLine() { return yyline + 1; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { return new Symbol(sym.MayorIgual, yychar, yyline,yytext());
          }
        case 86: break;
        case 32: 
          { return new Symbol(sym.RestaS, yychar, yyline,yytext());
          }
        case 87: break;
        case 1: 
          { return new Symbol(sym.Error, yychar, yyline,yytext());
          }
        case 88: break;
        case 26: 
          { return new Symbol(sym.Do, yychar, yyline,yytext());
          }
        case 89: break;
        case 76: 
          { return new Symbol(sym.String, yychar, yyline,yytext());
          }
        case 90: break;
        case 75: 
          { return new Symbol(sym.Inline, yychar, yyline,yytext());
          }
        case 91: break;
        case 69: 
          { return new Symbol(sym.While, yychar, yyline,yytext());
          }
        case 92: break;
        case 42: 
          { return new Symbol(sym.Nil, yychar, yyline,yytext());
          }
        case 93: break;
        case 13: 
          { return new Symbol(sym.Mayor, yychar, yyline,yytext());
          }
        case 94: break;
        case 10: 
          { return new Symbol(sym.PuntoComa, yychar, yyline,yytext());
          }
        case 95: break;
        case 72: 
          { return new Symbol(sym.Record, yychar, yyline,yytext());
          }
        case 96: break;
        case 67: 
          { return new Symbol(sym.Const, yychar, yyline,yytext());
          }
        case 97: break;
        case 85: 
          { return new Symbol(sym.Procedure, yychar, yyline,yytext());
          }
        case 98: break;
        case 71: 
          { return new Symbol(sym.Until, yychar, yyline,yytext());
          }
        case 99: break;
        case 55: 
          { return new Symbol(sym.Else, yychar, yyline,yytext());
          }
        case 100: break;
        case 60: 
          { return new Symbol(sym.Case, yychar, yyline,yytext());
          }
        case 101: break;
        case 74: 
          { return new Symbol(sym.Global, yychar, yyline,yytext());
          }
        case 102: break;
        case 68: 
          { return new Symbol(sym.Write, yychar, yyline,yytext());
          }
        case 103: break;
        case 83: 
          { return new Symbol(sym.Shortint, yychar, yyline,yytext());
          }
        case 104: break;
        case 48: 
          { return new Symbol(sym.Var, yychar, yyline,yytext());
          }
        case 105: break;
        case 24: 
          { return new Symbol(sym.Of, yychar, yyline,yytext());
          }
        case 106: break;
        case 3: 
          { /*Ignore*/
          }
        case 107: break;
        case 50: 
          { return new Symbol(sym.MenorDobleIgual, yychar, yyline,yytext());
          }
        case 108: break;
        case 21: 
          { return new Symbol(sym.In, yychar, yyline,yytext());
          }
        case 109: break;
        case 66: 
          { return new Symbol(sym.Label, yychar, yyline,yytext());
          }
        case 110: break;
        case 7: 
          { return new Symbol(sym.ParentesisC, yychar, yyline,yytext());
          }
        case 111: break;
        case 70: 
          { return new Symbol(sym.False, yychar, yyline,yytext());
          }
        case 112: break;
        case 52: 
          { return new Symbol(sym.Real, yychar, yyline,yytext());
          }
        case 113: break;
        case 58: 
          { return new Symbol(sym.Type, yychar, yyline,yytext());
          }
        case 114: break;
        case 43: 
          { return new Symbol(sym.Not, yychar, yyline,yytext());
          }
        case 115: break;
        case 6: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline,yytext());
          }
        case 116: break;
        case 2: 
          { return new Symbol(sym.Literal, yychar, yyline,yytext());
          }
        case 117: break;
        case 25: 
          { return new Symbol(sym.To, yychar, yyline,yytext());
          }
        case 118: break;
        case 20: 
          { lexeme=yytext(); return Error;
          }
        case 119: break;
        case 39: 
          { return new Symbol(sym.And, yychar, yyline,yytext());
          }
        case 120: break;
        case 40: 
          { return new Symbol(sym.End, yychar, yyline,yytext());
          }
        case 121: break;
        case 49: 
          { return new Symbol(sym.MayorDobleIgual, yychar, yyline,yytext());
          }
        case 122: break;
        case 33: 
          { return new Symbol(sym.MayorDoble, yychar, yyline,yytext());
          }
        case 123: break;
        case 28: 
          { return new Symbol(sym.MultiplicacionS, yychar, yyline,yytext());
          }
        case 124: break;
        case 17: 
          { return new Symbol(sym.CorcheteC, yychar, yyline,yytext());
          }
        case 125: break;
        case 11: 
          { return new Symbol(sym.Suma, yychar, yyline,yytext());
          }
        case 126: break;
        case 45: 
          { return new Symbol(sym.Div, yychar, yyline,yytext());
          }
        case 127: break;
        case 8: 
          { return new Symbol(sym.LlaveA, yychar, yyline,yytext());
          }
        case 128: break;
        case 56: 
          { return new Symbol(sym.Goto, yychar, yyline,yytext());
          }
        case 129: break;
        case 78: 
          { return new Symbol(sym.Packed, yychar, yyline,yytext());
          }
        case 130: break;
        case 51: 
          { return new Symbol(sym.Xor, yychar, yyline,yytext());
          }
        case 131: break;
        case 54: 
          { return new Symbol(sym.Byte, yychar, yyline,yytext());
          }
        case 132: break;
        case 73: 
          { return new Symbol(sym.Repeat, yychar, yyline,yytext());
          }
        case 133: break;
        case 65: 
          { return new Symbol(sym.Begin, yychar, yyline,yytext());
          }
        case 134: break;
        case 36: 
          { return new Symbol(sym.MenorIgual, yychar, yyline,yytext());
          }
        case 135: break;
        case 15: 
          { return new Symbol(sym.Menor, yychar, yyline,yytext());
          }
        case 136: break;
        case 18: 
          { return new Symbol(sym.DosPuntos, yychar, yyline,yytext());
          }
        case 137: break;
        case 23: 
          { return new Symbol(sym.Or, yychar, yyline,yytext());
          }
        case 138: break;
        case 63: 
          { return new Symbol(sym.File, yychar, yyline,yytext());
          }
        case 139: break;
        case 22: 
          { return new Symbol(sym.If, yychar, yyline,yytext());
          }
        case 140: break;
        case 35: 
          { return new Symbol(sym.Puntas, yychar, yyline,yytext());
          }
        case 141: break;
        case 53: 
          { return new Symbol(sym.Read, yychar, yyline,yytext());
          }
        case 142: break;
        case 41: 
          { return new Symbol(sym.Int, yychar, yyline,yytext());
          }
        case 143: break;
        case 12: 
          { return new Symbol(sym.Resta, yychar, yyline,yytext());
          }
        case 144: break;
        case 64: 
          { return new Symbol(sym.Array, yychar, yyline,yytext());
          }
        case 145: break;
        case 14: 
          { return new Symbol(sym.Igual, yychar, yyline,yytext());
          }
        case 146: break;
        case 57: 
          { return new Symbol(sym.True, yychar, yyline,yytext());
          }
        case 147: break;
        case 84: 
          { return new Symbol(sym.Function, yychar, yyline,yytext());
          }
        case 148: break;
        case 4: 
          { return new Symbol(sym.Division, yychar, yyline,yytext());
          }
        case 149: break;
        case 82: 
          { return new Symbol(sym.Program, yychar, yyline,yytext());
          }
        case 150: break;
        case 59: 
          { return new Symbol(sym.Then, yychar, yyline,yytext());
          }
        case 151: break;
        case 81: 
          { return new Symbol(sym.Forward, yychar, yyline,yytext());
          }
        case 152: break;
        case 47: 
          { return new Symbol(sym.Mod, yychar, yyline,yytext());
          }
        case 153: break;
        case 30: 
          { return new Symbol(sym.SumaS, yychar, yyline,yytext());
          }
        case 154: break;
        case 79: 
          { return new Symbol(sym.Boolean, yychar, yyline,yytext());
          }
        case 155: break;
        case 61: 
          { return new Symbol(sym.Char, yychar, yyline,yytext());
          }
        case 156: break;
        case 46: 
          { return new Symbol(sym.For, yychar, yyline,yytext());
          }
        case 157: break;
        case 9: 
          { return new Symbol(sym.LlaveC, yychar, yyline,yytext());
          }
        case 158: break;
        case 19: 
          { return new Symbol(sym.Punto, yychar, yyline,yytext());
          }
        case 159: break;
        case 5: 
          { return new Symbol(sym.ParentesisA, yychar, yyline,yytext());
          }
        case 160: break;
        case 27: 
          { return new Symbol(sym.DivisionS, yychar, yyline,yytext());
          }
        case 161: break;
        case 44: 
          { return new Symbol(sym.Set, yychar, yyline,yytext());
          }
        case 162: break;
        case 31: 
          { return new Symbol(sym.RestaDoble, yychar, yyline,yytext());
          }
        case 163: break;
        case 77: 
          { return new Symbol(sym.Downto, yychar, yyline,yytext());
          }
        case 164: break;
        case 16: 
          { return new Symbol(sym.CorcheteA, yychar, yyline,yytext());
          }
        case 165: break;
        case 80: 
          { return new Symbol(sym.Longint, yychar, yyline,yytext());
          }
        case 166: break;
        case 38: 
          { return new Symbol(sym.PuntoIgual, yychar, yyline,yytext());
          }
        case 167: break;
        case 37: 
          { return new Symbol(sym.MenorDoble, yychar, yyline,yytext());
          }
        case 168: break;
        case 29: 
          { return new Symbol(sym.SumaDoble, yychar, yyline,yytext());
          }
        case 169: break;
        case 62: 
          { return new Symbol(sym.With, yychar, yyline,yytext());
          }
        case 170: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return sym.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
