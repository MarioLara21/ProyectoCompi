/* The following code was generated by JFlex 1.4.3 on 4/11/23, 21:12 */

package scanner;
import static scanner.Tokens.*;

import java.io.*;

/**
 *
 * @author Mario Lara
 * @author Andrey Sanchez
 * @author Jonnathan Villalobos
 */


class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\33\2\0\1\3\22\0\1\61\1\60\1\57\1\56"+
    "\1\60\1\60\1\60\1\0\1\34\1\36\1\35\1\42\1\3\1\43"+
    "\1\52\1\32\1\2\11\54\1\51\1\41\1\46\1\45\1\44\1\0"+
    "\1\60\4\1\1\55\25\1\1\47\1\0\1\50\1\0\1\1\1\60"+
    "\1\4\1\7\1\17\1\22\1\10\1\24\1\11\1\21\1\12\1\1"+
    "\1\27\1\15\1\30\1\13\1\14\1\26\1\1\1\5\1\20\1\16"+
    "\1\25\1\31\1\23\1\53\1\6\1\1\1\37\1\0\1\40\1\60"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\23\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\3"+
    "\3\1\1\2\2\24\1\0\1\24\1\3\1\24\11\2"+
    "\1\25\1\26\2\2\1\27\1\30\4\2\1\31\10\2"+
    "\1\32\14\2\1\4\1\33\2\0\1\34\1\0\1\4"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\24\1\0\1\2\1\3\1\0\1\24"+
    "\1\3\1\2\1\3\1\24\1\2\1\47\6\2\1\50"+
    "\3\2\1\51\1\52\1\53\10\2\1\54\2\2\1\55"+
    "\6\2\1\56\4\2\1\57\1\60\1\0\1\61\1\62"+
    "\1\24\1\0\1\63\1\2\1\24\1\2\1\64\1\65"+
    "\2\2\1\66\2\2\1\67\1\70\3\2\1\71\1\72"+
    "\1\73\1\74\1\2\1\75\4\2\1\76\2\2\1\77"+
    "\6\2\1\4\1\2\1\24\1\100\2\2\1\101\2\2"+
    "\1\102\1\2\1\103\3\2\1\104\1\105\1\106\2\2"+
    "\1\107\4\2\1\110\1\111\1\2\1\112\1\2\1\113"+
    "\1\2\1\114\2\2\1\115\3\2\1\116\1\117\1\2"+
    "\1\120\1\2\1\121\2\2\1\122\1\123\2\2\1\124"+
    "\166\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\62\0\u04e2\0\u0514\0\62\0\u0546\0\62\0\u0578"+
    "\0\u05aa\0\u05dc\0\62\0\u060e\0\62\0\62\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\62"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\144\0\u0abe"+
    "\0\u0af0\0\144\0\144\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\144"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\62\0\u1036"+
    "\0\u076c\0\62\0\u0546\0\u0546\0\u076c\0\62\0\u076c\0\62"+
    "\0\u1068\0\62\0\62\0\62\0\u109a\0\62\0\u0672\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\62\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\144\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\144\0\u13ba\0\u13ec\0\u141e\0\144\0\144\0\144\0\u1450"+
    "\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\144"+
    "\0\u15e0\0\u1612\0\144\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\144\0\144"+
    "\0\u186a\0\62\0\62\0\u189c\0\u189c\0\144\0\u18ce\0\u1900"+
    "\0\u1932\0\144\0\144\0\u1964\0\u1996\0\144\0\u19c8\0\u19fa"+
    "\0\144\0\144\0\u1a2c\0\u1a5e\0\u1a90\0\144\0\144\0\144"+
    "\0\144\0\u1ac2\0\144\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\144"+
    "\0\u1bbc\0\u1bee\0\144\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u1036\0\u1d4c\0\u1130\0\144\0\u1d7e\0\u1db0\0\144"+
    "\0\u1de2\0\u1e14\0\144\0\u1e46\0\144\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\144\0\144\0\144\0\u1f0e\0\u1f40\0\144\0\u1f72\0\u1fa4"+
    "\0\u1fd6\0\u2008\0\144\0\144\0\u203a\0\144\0\u206c\0\144"+
    "\0\u209e\0\144\0\u20d0\0\u2102\0\144\0\u2134\0\u2166\0\u2198"+
    "\0\144\0\144\0\u21ca\0\144\0\u21fc\0\144\0\u222e\0\u2260"+
    "\0\144\0\144\0\u2292\0\u22c4\0\144\0\u22f6\0\u2328\0\u235a"+
    "\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea"+
    "\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a"+
    "\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a"+
    "\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a"+
    "\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba"+
    "\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a"+
    "\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda"+
    "\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a"+
    "\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa"+
    "\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a"+
    "\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a"+
    "\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778\0\u37aa"+
    "\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a"+
    "\0\u396c\0\u399e\0\u39d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\3\1\22\1\23\1\24\1\25\1\26\1\3"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\2\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\3\1\53\1\54"+
    "\1\55\1\5\63\0\1\3\1\56\1\0\26\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\62\1\63\1\0\26\62"+
    "\20\0\1\64\1\62\1\63\1\62\7\0\1\5\55\0"+
    "\1\5\1\0\1\3\1\56\1\0\1\3\1\65\5\3"+
    "\1\66\16\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\4\3\1\67\21\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\2\3\1\70\1\3"+
    "\1\71\3\3\1\72\15\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\7\3\1\73\1\3\1\74"+
    "\14\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\10\3\1\75\15\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\7\3\1\76\10\3\1\77"+
    "\5\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\6\3\1\100\1\3\1\101\15\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\1\3\1\102"+
    "\16\3\1\103\5\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\1\104\7\3\1\105\15\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\1\3"+
    "\1\106\1\107\5\3\1\110\4\3\1\111\10\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\1\112"+
    "\7\3\1\113\4\3\1\114\10\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\4\3\1\115\5\3"+
    "\1\116\2\3\1\117\10\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\6\3\1\120\1\3\1\121"+
    "\15\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\1\3\1\122\4\3\1\123\6\3\1\124\10\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\1\125\5\3\1\126\1\3\1\127\10\3\1\130\4\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\7\3\1\131\16\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\1\132\1\133\24\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\10\3\1\134"+
    "\15\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\1\135\25\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\32\0"+
    "\1\136\12\0\1\137\51\0\1\140\25\0\1\62\2\0"+
    "\26\62\3\0\1\141\4\0\2\141\1\0\1\142\5\0"+
    "\1\62\1\0\1\62\1\141\1\0\1\141\1\0\40\143"+
    "\1\144\21\143\1\0\1\62\2\0\26\62\3\0\1\141"+
    "\4\0\1\145\1\141\1\0\1\146\5\0\1\62\1\0"+
    "\1\62\1\141\1\0\1\141\2\0\1\62\2\0\26\62"+
    "\3\0\1\141\4\0\1\141\1\147\1\0\1\150\5\0"+
    "\1\62\1\0\1\62\1\141\1\0\1\141\45\0\1\151"+
    "\1\152\60\0\1\153\1\154\1\155\60\0\1\156\16\0"+
    "\1\157\5\0\1\160\43\0\1\157\1\160\5\0\1\3"+
    "\1\56\1\0\10\3\1\161\15\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\62\1\52\1\0\26\62\20\0\1\64"+
    "\1\62\1\52\1\62\5\0\1\62\1\162\1\0\26\62"+
    "\3\0\1\141\4\0\2\141\7\0\1\62\1\162\1\62"+
    "\1\141\1\0\1\141\1\0\1\163\1\164\2\163\26\164"+
    "\1\163\1\0\17\163\1\164\1\163\1\164\1\163\1\165"+
    "\2\163\1\0\1\62\2\0\26\62\3\0\1\141\4\0"+
    "\2\141\7\0\1\62\1\0\1\62\1\141\1\0\1\141"+
    "\2\0\1\166\1\56\1\0\26\166\21\0\1\166\1\56"+
    "\1\166\41\0\1\57\4\0\2\57\12\0\1\57\1\0"+
    "\1\57\2\0\1\61\2\0\26\61\21\0\1\61\1\0"+
    "\1\61\1\0\1\60\1\0\1\61\1\0\1\62\2\0"+
    "\26\62\21\0\1\62\1\0\1\62\5\0\1\62\1\63"+
    "\1\0\26\62\20\0\1\60\1\62\1\63\1\62\6\0"+
    "\1\167\5\0\1\170\43\0\1\167\1\170\5\0\1\3"+
    "\1\56\1\0\1\3\1\171\24\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\16\3\1\172\7\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\1\173\12\3\1\174\6\3\1\175\3\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\12\3\1\176"+
    "\13\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\5\3\1\177\20\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\10\3\1\200\15\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\16\3"+
    "\1\201\7\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\14\3\1\202\11\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\12\3\1\203\13\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\11\3\1\204\1\205\13\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\11\3\1\206\14\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\12\3"+
    "\1\207\13\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\3\3\1\210\22\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\7\3\1\211\16\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\21\3\1\212\4\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\22\3\1\213\3\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\4\3\1\214"+
    "\21\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\14\3\1\215\11\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\7\3\1\216\16\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\1\217"+
    "\25\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\12\3\1\220\13\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\1\3\1\221\24\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\10\3"+
    "\1\222\15\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\25\3\1\223\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\17\3\1\224\6\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\6\3"+
    "\1\225\17\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\12\3\1\226\13\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\6\3\1\227\17\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\11\3\1\230\14\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\11\3\1\231\14\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\1\3\1\232"+
    "\24\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\7\3\1\233\16\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\12\3\1\234\13\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\13\3"+
    "\1\235\12\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\10\3\1\236\15\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\16\3\1\237\7\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\1\3\1\240\24\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\33\136"+
    "\1\0\26\136\35\140\1\241\24\140\45\0\1\242\61\0"+
    "\1\243\16\0\1\244\37\0\2\245\10\0\1\244\6\0"+
    "\1\3\1\56\1\0\1\3\1\246\24\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\2\0\1\162\51\0\1\162\5\0\33\163"+
    "\1\0\23\163\1\165\3\163\1\164\2\163\26\164\1\163"+
    "\1\0\17\163\1\164\1\163\1\164\1\163\1\165\1\163"+
    "\1\164\1\0\1\166\1\247\1\0\26\166\21\0\1\166"+
    "\1\247\1\166\6\0\1\167\5\0\1\250\43\0\1\167"+
    "\1\250\46\0\2\60\17\0\1\3\1\56\1\0\1\251"+
    "\25\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\11\3\1\252\4\3\1\253\7\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\10\3\1\254"+
    "\15\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\4\3\1\255\21\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\4\3\1\256\21\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\6\3"+
    "\1\257\17\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\11\3\1\260\14\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\4\3\1\261\21\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\10\3\1\262\15\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\6\3\1\263\17\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\4\3\1\264"+
    "\21\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\5\3\1\265\20\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\4\3\1\266\21\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\4\3"+
    "\1\267\21\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\7\3\1\270\16\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\4\3\1\271\21\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\14\3\1\272\11\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\1\3\1\273\24\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\6\3\1\274"+
    "\17\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\1\3\1\275\24\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\7\3\1\276\16\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\12\3"+
    "\1\277\13\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\15\3\1\300\10\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\11\3\1\301\14\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\14\3\1\302\11\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\4\3\1\303\21\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\17\3\1\304"+
    "\6\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\13\3\1\305\12\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\6\3\1\306\17\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\23\3"+
    "\1\307\2\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\5\3\1\310\5\3\1\311\12\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\35\140\1\241\1\312\23\140\2\0"+
    "\1\244\51\0\1\244\6\0\1\313\1\247\1\0\26\313"+
    "\21\0\1\313\1\247\1\313\6\0\1\162\37\0\2\314"+
    "\10\0\1\162\6\0\1\3\1\56\1\0\2\3\1\315"+
    "\23\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\1\3\1\316\24\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\1\317\25\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\7\3\1\320"+
    "\16\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\4\3\1\321\21\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\7\3\1\322\16\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\11\3"+
    "\1\323\14\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\6\3\1\324\17\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\12\3\1\325\13\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\7\3\1\326\16\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\12\3\1\327\13\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\12\3\1\330"+
    "\13\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\4\3\1\331\21\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\4\3\1\332\21\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\4\3"+
    "\1\333\21\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\1\334\25\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\12\3\1\335\13\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\11\3"+
    "\1\336\14\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\4\3\1\337\21\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\1\3\1\340\24\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\4\3\1\341\21\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\313\1\342\1\0\26\313\21\0\1\313\1\342\1\313"+
    "\5\0\1\3\1\56\1\0\16\3\1\343\7\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\12\3"+
    "\1\344\13\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\1\345\25\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\4\3\1\346\21\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\3\1\56\1\0\7\3"+
    "\1\347\16\3\3\0\1\57\4\0\2\57\7\0\1\3"+
    "\1\56\1\3\1\57\1\60\1\57\1\61\1\0\1\3"+
    "\1\56\1\0\5\3\1\350\20\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\6\3\1\351\17\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\10\3\1\352\15\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\1\3\1\353\24\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\6\3\1\354"+
    "\17\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\16\3\1\355\7\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\1\356\25\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\16\3\1\357"+
    "\7\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\360\1\342"+
    "\1\0\26\360\21\0\1\360\1\342\1\360\5\0\1\3"+
    "\1\56\1\0\7\3\1\361\16\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\3\1\56\1\0\12\3\1\362\13\3"+
    "\3\0\1\57\4\0\2\57\7\0\1\3\1\56\1\3"+
    "\1\57\1\60\1\57\1\61\1\0\1\3\1\56\1\0"+
    "\7\3\1\363\16\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\16\3\1\364\7\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\10\3\1\365"+
    "\15\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\3\1\56"+
    "\1\0\24\3\1\366\1\3\3\0\1\57\4\0\2\57"+
    "\7\0\1\3\1\56\1\3\1\57\1\60\1\57\1\61"+
    "\1\0\1\3\1\56\1\0\21\3\1\367\4\3\3\0"+
    "\1\57\4\0\2\57\7\0\1\3\1\56\1\3\1\57"+
    "\1\60\1\57\1\61\1\0\1\360\1\370\1\0\26\360"+
    "\21\0\1\360\1\370\1\360\5\0\1\3\1\56\1\0"+
    "\12\3\1\371\13\3\3\0\1\57\4\0\2\57\7\0"+
    "\1\3\1\56\1\3\1\57\1\60\1\57\1\61\1\0"+
    "\1\3\1\56\1\0\7\3\1\372\16\3\3\0\1\57"+
    "\4\0\2\57\7\0\1\3\1\56\1\3\1\57\1\60"+
    "\1\57\1\61\1\0\1\3\1\56\1\0\1\3\1\373"+
    "\24\3\3\0\1\57\4\0\2\57\7\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\57\1\61\1\0\1\374\1\370"+
    "\1\0\26\374\21\0\1\374\1\370\1\374\5\0\1\3"+
    "\1\56\1\0\4\3\1\375\21\3\3\0\1\57\4\0"+
    "\2\57\7\0\1\3\1\56\1\3\1\57\1\60\1\57"+
    "\1\61\1\0\1\374\1\376\1\0\26\374\21\0\1\374"+
    "\1\376\1\374\5\0\1\377\1\376\1\0\26\377\21\0"+
    "\1\377\1\376\1\377\5\0\1\377\1\u0100\1\0\26\377"+
    "\21\0\1\377\1\u0100\1\377\5\0\1\u0101\1\u0100\1\0"+
    "\26\u0101\21\0\1\u0101\1\u0100\1\u0101\5\0\1\u0101\1\u0102"+
    "\1\0\26\u0101\21\0\1\u0101\1\u0102\1\u0101\5\0\1\u0103"+
    "\1\u0102\1\0\26\u0103\21\0\1\u0103\1\u0102\1\u0103\5\0"+
    "\1\u0103\1\u0104\1\0\26\u0103\21\0\1\u0103\1\u0104\1\u0103"+
    "\5\0\1\u0105\1\u0104\1\0\26\u0105\21\0\1\u0105\1\u0104"+
    "\1\u0105\5\0\1\u0105\1\u0106\1\0\26\u0105\21\0\1\u0105"+
    "\1\u0106\1\u0105\5\0\1\u0107\1\u0106\1\0\26\u0107\21\0"+
    "\1\u0107\1\u0106\1\u0107\5\0\1\u0107\1\u0108\1\0\26\u0107"+
    "\21\0\1\u0107\1\u0108\1\u0107\5\0\1\u0109\1\u0108\1\0"+
    "\26\u0109\21\0\1\u0109\1\u0108\1\u0109\5\0\1\u0109\1\u010a"+
    "\1\0\26\u0109\21\0\1\u0109\1\u010a\1\u0109\5\0\1\u010b"+
    "\1\u010a\1\0\26\u010b\21\0\1\u010b\1\u010a\1\u010b\5\0"+
    "\1\u010b\1\u010c\1\0\26\u010b\21\0\1\u010b\1\u010c\1\u010b"+
    "\5\0\1\u010d\1\u010c\1\0\26\u010d\21\0\1\u010d\1\u010c"+
    "\1\u010d\5\0\1\u010d\1\u010e\1\0\26\u010d\21\0\1\u010d"+
    "\1\u010e\1\u010d\5\0\1\u010f\1\u010e\1\0\26\u010f\21\0"+
    "\1\u010f\1\u010e\1\u010f\5\0\1\u010f\1\u0110\1\0\26\u010f"+
    "\21\0\1\u010f\1\u0110\1\u010f\5\0\1\u0111\1\u0110\1\0"+
    "\26\u0111\21\0\1\u0111\1\u0110\1\u0111\5\0\1\u0111\1\u0112"+
    "\1\0\26\u0111\21\0\1\u0111\1\u0112\1\u0111\5\0\1\u0113"+
    "\1\u0112\1\0\26\u0113\21\0\1\u0113\1\u0112\1\u0113\5\0"+
    "\1\u0113\1\u0114\1\0\26\u0113\21\0\1\u0113\1\u0114\1\u0113"+
    "\5\0\1\u0115\1\u0114\1\0\26\u0115\21\0\1\u0115\1\u0114"+
    "\1\u0115\5\0\1\u0115\1\u0116\1\0\26\u0115\21\0\1\u0115"+
    "\1\u0116\1\u0115\5\0\1\u0117\1\u0116\1\0\26\u0117\21\0"+
    "\1\u0117\1\u0116\1\u0117\5\0\1\u0117\1\u0118\1\0\26\u0117"+
    "\21\0\1\u0117\1\u0118\1\u0117\5\0\1\u0119\1\u0118\1\0"+
    "\26\u0119\21\0\1\u0119\1\u0118\1\u0119\5\0\1\u0119\1\u011a"+
    "\1\0\26\u0119\21\0\1\u0119\1\u011a\1\u0119\5\0\1\u011b"+
    "\1\u011a\1\0\26\u011b\21\0\1\u011b\1\u011a\1\u011b\5\0"+
    "\1\u011b\1\u011c\1\0\26\u011b\21\0\1\u011b\1\u011c\1\u011b"+
    "\5\0\1\u011d\1\u011c\1\0\26\u011d\21\0\1\u011d\1\u011c"+
    "\1\u011d\5\0\1\u011d\1\u011e\1\0\26\u011d\21\0\1\u011d"+
    "\1\u011e\1\u011d\5\0\1\u011f\1\u011e\1\0\26\u011f\21\0"+
    "\1\u011f\1\u011e\1\u011f\5\0\1\u011f\1\u0120\1\0\26\u011f"+
    "\21\0\1\u011f\1\u0120\1\u011f\5\0\1\u0121\1\u0120\1\0"+
    "\26\u0121\21\0\1\u0121\1\u0120\1\u0121\5\0\1\u0121\1\u0122"+
    "\1\0\26\u0121\21\0\1\u0121\1\u0122\1\u0121\5\0\1\u0123"+
    "\1\u0122\1\0\26\u0123\21\0\1\u0123\1\u0122\1\u0123\5\0"+
    "\1\u0123\1\u0124\1\0\26\u0123\21\0\1\u0123\1\u0124\1\u0123"+
    "\5\0\1\u0125\1\u0124\1\0\26\u0125\21\0\1\u0125\1\u0124"+
    "\1\u0125\5\0\1\u0125\1\u0126\1\0\26\u0125\21\0\1\u0125"+
    "\1\u0126\1\u0125\5\0\1\u0127\1\u0126\1\0\26\u0127\21\0"+
    "\1\u0127\1\u0126\1\u0127\5\0\1\u0127\1\u0128\1\0\26\u0127"+
    "\21\0\1\u0127\1\u0128\1\u0127\5\0\1\u0129\1\u0128\1\0"+
    "\26\u0129\21\0\1\u0129\1\u0128\1\u0129\5\0\1\u0129\1\u012a"+
    "\1\0\26\u0129\21\0\1\u0129\1\u012a\1\u0129\5\0\1\u012b"+
    "\1\u012a\1\0\26\u012b\21\0\1\u012b\1\u012a\1\u012b\5\0"+
    "\1\u012b\1\u012c\1\0\26\u012b\21\0\1\u012b\1\u012c\1\u012b"+
    "\5\0\1\u012d\1\u012c\1\0\26\u012d\21\0\1\u012d\1\u012c"+
    "\1\u012d\5\0\1\u012d\1\u012e\1\0\26\u012d\21\0\1\u012d"+
    "\1\u012e\1\u012d\5\0\1\u012f\1\u012e\1\0\26\u012f\21\0"+
    "\1\u012f\1\u012e\1\u012f\5\0\1\u012f\1\u0130\1\0\26\u012f"+
    "\21\0\1\u012f\1\u0130\1\u012f\5\0\1\u0131\1\u0130\1\0"+
    "\26\u0131\21\0\1\u0131\1\u0130\1\u0131\5\0\1\u0131\1\u0132"+
    "\1\0\26\u0131\21\0\1\u0131\1\u0132\1\u0131\5\0\1\u0133"+
    "\1\u0132\1\0\26\u0133\21\0\1\u0133\1\u0132\1\u0133\5\0"+
    "\1\u0133\1\u0134\1\0\26\u0133\21\0\1\u0133\1\u0134\1\u0133"+
    "\5\0\1\u0135\1\u0134\1\0\26\u0135\21\0\1\u0135\1\u0134"+
    "\1\u0135\5\0\1\u0135\1\u0136\1\0\26\u0135\21\0\1\u0135"+
    "\1\u0136\1\u0135\5\0\1\u0137\1\u0136\1\0\26\u0137\21\0"+
    "\1\u0137\1\u0136\1\u0137\5\0\1\u0137\1\u0138\1\0\26\u0137"+
    "\21\0\1\u0137\1\u0138\1\u0137\5\0\1\u0139\1\u0138\1\0"+
    "\26\u0139\21\0\1\u0139\1\u0138\1\u0139\5\0\1\u0139\1\u013a"+
    "\1\0\26\u0139\21\0\1\u0139\1\u013a\1\u0139\5\0\1\u013b"+
    "\1\u013a\1\0\26\u013b\21\0\1\u013b\1\u013a\1\u013b\5\0"+
    "\1\u013b\1\u013c\1\0\26\u013b\21\0\1\u013b\1\u013c\1\u013b"+
    "\5\0\1\u013d\1\u013c\1\0\26\u013d\21\0\1\u013d\1\u013c"+
    "\1\u013d\5\0\1\u013d\1\u013e\1\0\26\u013d\21\0\1\u013d"+
    "\1\u013e\1\u013d\5\0\1\u013f\1\u013e\1\0\26\u013f\21\0"+
    "\1\u013f\1\u013e\1\u013f\5\0\1\u013f\1\u0140\1\0\26\u013f"+
    "\21\0\1\u013f\1\u0140\1\u013f\5\0\1\u0141\1\u0140\1\0"+
    "\26\u0141\21\0\1\u0141\1\u0140\1\u0141\5\0\1\u0141\1\u0142"+
    "\1\0\26\u0141\21\0\1\u0141\1\u0142\1\u0141\5\0\1\u0143"+
    "\1\u0142\1\0\26\u0143\21\0\1\u0143\1\u0142\1\u0143\5\0"+
    "\1\u0143\1\u0144\1\0\26\u0143\21\0\1\u0143\1\u0144\1\u0143"+
    "\5\0\1\u0145\1\u0144\1\0\26\u0145\21\0\1\u0145\1\u0144"+
    "\1\u0145\5\0\1\u0145\1\u0146\1\0\26\u0145\21\0\1\u0145"+
    "\1\u0146\1\u0145\5\0\1\u0147\1\u0146\1\0\26\u0147\21\0"+
    "\1\u0147\1\u0146\1\u0147\5\0\1\u0147\1\u0148\1\0\26\u0147"+
    "\21\0\1\u0147\1\u0148\1\u0147\5\0\1\u0149\1\u0148\1\0"+
    "\26\u0149\21\0\1\u0149\1\u0148\1\u0149\5\0\1\u0149\1\u014a"+
    "\1\0\26\u0149\21\0\1\u0149\1\u014a\1\u0149\5\0\1\u014b"+
    "\1\u014a\1\0\26\u014b\21\0\1\u014b\1\u014a\1\u014b\5\0"+
    "\1\u014b\1\u014c\1\0\26\u014b\21\0\1\u014b\1\u014c\1\u014b"+
    "\5\0\1\u014d\1\u014c\1\0\26\u014d\21\0\1\u014d\1\u014c"+
    "\1\u014d\5\0\1\u014d\1\u014e\1\0\26\u014d\21\0\1\u014d"+
    "\1\u014e\1\u014d\5\0\1\u014f\1\u014e\1\0\26\u014f\21\0"+
    "\1\u014f\1\u014e\1\u014f\5\0\1\u014f\1\u0150\1\0\26\u014f"+
    "\21\0\1\u014f\1\u0150\1\u014f\5\0\1\u0151\1\u0150\1\0"+
    "\26\u0151\21\0\1\u0151\1\u0150\1\u0151\5\0\1\u0151\1\u0152"+
    "\1\0\26\u0151\21\0\1\u0151\1\u0152\1\u0151\5\0\1\u0153"+
    "\1\u0152\1\0\26\u0153\21\0\1\u0153\1\u0152\1\u0153\5\0"+
    "\1\u0153\1\u0154\1\0\26\u0153\21\0\1\u0153\1\u0154\1\u0153"+
    "\5\0\1\u0155\1\u0154\1\0\26\u0155\21\0\1\u0155\1\u0154"+
    "\1\u0155\5\0\1\u0155\1\u0156\1\0\26\u0155\21\0\1\u0155"+
    "\1\u0156\1\u0155\5\0\1\u0157\1\u0156\1\0\26\u0157\21\0"+
    "\1\u0157\1\u0156\1\u0157\5\0\1\u0157\1\u0158\1\0\26\u0157"+
    "\21\0\1\u0157\1\u0158\1\u0157\5\0\1\u0159\1\u0158\1\0"+
    "\26\u0159\21\0\1\u0159\1\u0158\1\u0159\5\0\1\u0159\1\u015a"+
    "\1\0\26\u0159\21\0\1\u0159\1\u015a\1\u0159\5\0\1\u015b"+
    "\1\u015a\1\0\26\u015b\21\0\1\u015b\1\u015a\1\u015b\5\0"+
    "\1\u015b\1\u015c\1\0\26\u015b\21\0\1\u015b\1\u015c\1\u015b"+
    "\5\0\1\u015d\1\u015c\1\0\26\u015d\21\0\1\u015d\1\u015c"+
    "\1\u015d\5\0\1\u015d\1\u015e\1\0\26\u015d\21\0\1\u015d"+
    "\1\u015e\1\u015d\5\0\1\u015f\1\u015e\1\0\26\u015f\21\0"+
    "\1\u015f\1\u015e\1\u015f\5\0\1\u015f\1\u0160\1\0\26\u015f"+
    "\21\0\1\u015f\1\u0160\1\u015f\5\0\1\u0161\1\u0160\1\0"+
    "\26\u0161\21\0\1\u0161\1\u0160\1\u0161\5\0\1\u0161\1\u0162"+
    "\1\0\26\u0161\21\0\1\u0161\1\u0162\1\u0161\5\0\1\u0163"+
    "\1\u0162\1\0\26\u0163\21\0\1\u0163\1\u0162\1\u0163\5\0"+
    "\1\u0163\1\u0164\1\0\26\u0163\21\0\1\u0163\1\u0164\1\u0163"+
    "\5\0\1\u0165\1\u0164\1\0\26\u0165\21\0\1\u0165\1\u0164"+
    "\1\u0165\5\0\1\u0165\1\u0166\1\0\26\u0165\21\0\1\u0165"+
    "\1\u0166\1\u0165\5\0\1\u0167\1\u0166\1\0\26\u0167\21\0"+
    "\1\u0167\1\u0166\1\u0167\5\0\1\u0167\1\u0168\1\0\26\u0167"+
    "\21\0\1\u0167\1\u0168\1\u0167\5\0\1\u0169\1\u0168\1\0"+
    "\26\u0169\21\0\1\u0169\1\u0168\1\u0169\5\0\1\u0169\1\u016a"+
    "\1\0\26\u0169\21\0\1\u0169\1\u016a\1\u0169\5\0\1\u016b"+
    "\1\u016a\1\0\26\u016b\21\0\1\u016b\1\u016a\1\u016b\5\0"+
    "\1\u016b\1\u016c\1\0\26\u016b\21\0\1\u016b\1\u016c\1\u016b"+
    "\5\0\1\u016d\1\u016c\1\0\26\u016d\21\0\1\u016d\1\u016c"+
    "\1\u016d\5\0\1\u016d\1\u016e\1\0\26\u016d\21\0\1\u016d"+
    "\1\u016e\1\u016d\5\0\1\u016f\1\u016e\1\0\26\u016f\21\0"+
    "\1\u016f\1\u016e\1\u016f\5\0\1\u016f\1\u0170\1\0\26\u016f"+
    "\21\0\1\u016f\1\u0170\1\u016f\5\0\1\u0171\1\u0170\1\0"+
    "\26\u0171\21\0\1\u0171\1\u0170\1\u0171\5\0\1\u0171\1\u0172"+
    "\1\0\26\u0171\21\0\1\u0171\1\u0172\1\u0171\5\0\1\u0173"+
    "\1\u0172\1\0\26\u0173\21\0\1\u0173\1\u0172\1\u0173\5\0"+
    "\1\u0173\2\0\26\u0173\21\0\1\u0173\1\0\1\u0173\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\2\11\11\1\1\11\1\0\55\1"+
    "\1\11\2\0\1\11\1\0\2\1\1\11\1\1\1\11"+
    "\1\1\3\11\1\1\1\11\1\1\1\0\2\1\1\0"+
    "\1\1\1\11\53\1\1\0\2\11\1\1\1\0\316\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int GetLine() { return yyline + 1; }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          { lexeme=yytext(); return Array;
          }
        case 85: break;
        case 69: 
          { lexeme=yytext(); return While;
          }
        case 86: break;
        case 33: 
          { lexeme=yytext(); return MayorDoble;
          }
        case 87: break;
        case 49: 
          { lexeme=yytext(); return MayorDobleIgual;
          }
        case 88: break;
        case 34: 
          { lexeme=yytext(); return MayorIgual;
          }
        case 89: break;
        case 44: 
          { lexeme=yytext(); return Set;
          }
        case 90: break;
        case 67: 
          { lexeme=yytext(); return Const;
          }
        case 91: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 92: break;
        case 50: 
          { lexeme=yytext(); return MenorDobleIgual;
          }
        case 93: break;
        case 42: 
          { lexeme=yytext(); return Nil;
          }
        case 94: break;
        case 63: 
          { lexeme=yytext(); return File;
          }
        case 95: break;
        case 82: 
          { lexeme=yytext(); return Shortint;
          }
        case 96: break;
        case 55: 
          { lexeme=yytext(); return Else;
          }
        case 97: break;
        case 62: 
          { lexeme=yytext(); return With;
          }
        case 98: break;
        case 18: 
          { lexeme=yytext(); return DosPuntos;
          }
        case 99: break;
        case 47: 
          { lexeme=yytext(); return Mod;
          }
        case 100: break;
        case 51: 
          { lexeme=yytext(); return Xor;
          }
        case 101: break;
        case 56: 
          { lexeme=yytext(); return Goto;
          }
        case 102: break;
        case 59: 
          { lexeme=yytext(); return Then;
          }
        case 103: break;
        case 29: 
          { lexeme=yytext(); return Sumadoble;
          }
        case 104: break;
        case 28: 
          { lexeme=yytext(); return MultiplicacionS;
          }
        case 105: break;
        case 45: 
          { lexeme=yytext(); return Div;
          }
        case 106: break;
        case 84: 
          { lexeme=yytext(); return Procedure;
          }
        case 107: break;
        case 60: 
          { lexeme=yytext(); return Case;
          }
        case 108: break;
        case 53: 
          { lexeme=yytext(); return Read;
          }
        case 109: break;
        case 75: 
          { lexeme=yytext(); return String;
          }
        case 110: break;
        case 4: 
          { /*Ignore*/
          }
        case 111: break;
        case 30: 
          { lexeme=yytext(); return SumaS;
          }
        case 112: break;
        case 20: 
          { lexeme=yytext(); return Error;
          }
        case 113: break;
        case 72: 
          { lexeme=yytext(); return Record;
          }
        case 114: break;
        case 9: 
          { lexeme=yytext(); return ParentesisC;
          }
        case 115: break;
        case 78: 
          { lexeme=yytext(); return Boolean;
          }
        case 116: break;
        case 57: 
          { lexeme=yytext(); return True;
          }
        case 117: break;
        case 35: 
          { lexeme=yytext(); return Puntas;
          }
        case 118: break;
        case 77: 
          { lexeme=yytext(); return Packed;
          }
        case 119: break;
        case 26: 
          { lexeme=yytext(); return Do;
          }
        case 120: break;
        case 21: 
          { lexeme=yytext(); return In;
          }
        case 121: break;
        case 79: 
          { lexeme=yytext(); return Longint;
          }
        case 122: break;
        case 12: 
          { lexeme=yytext(); return Resta;
          }
        case 123: break;
        case 38: 
          { lexeme=yytext(); return PuntoIgual;
          }
        case 124: break;
        case 41: 
          { lexeme=yytext(); return Int;
          }
        case 125: break;
        case 66: 
          { lexeme=yytext(); return Label;
          }
        case 126: break;
        case 74: 
          { lexeme=yytext(); return Inline;
          }
        case 127: break;
        case 10: 
          { lexeme=yytext(); return PuntoComa;
          }
        case 128: break;
        case 70: 
          { lexeme=yytext(); return False;
          }
        case 129: break;
        case 14: 
          { lexeme=yytext(); return Igual;
          }
        case 130: break;
        case 17: 
          { lexeme=yytext(); return CorcheteC;
          }
        case 131: break;
        case 24: 
          { lexeme=yytext(); return Of;
          }
        case 132: break;
        case 80: 
          { lexeme=yytext(); return Forward;
          }
        case 133: break;
        case 11: 
          { lexeme=yytext(); return Suma;
          }
        case 134: break;
        case 48: 
          { lexeme=yytext(); return Var;
          }
        case 135: break;
        case 73: 
          { lexeme=yytext(); return Repeat;
          }
        case 136: break;
        case 43: 
          { lexeme=yytext(); return Not;
          }
        case 137: break;
        case 23: 
          { lexeme=yytext(); return Or;
          }
        case 138: break;
        case 7: 
          { lexeme=yytext(); return ParentesisA;
          }
        case 139: break;
        case 46: 
          { lexeme=yytext(); return For;
          }
        case 140: break;
        case 6: 
          { lexeme=yytext(); return SaltoLinea;
          }
        case 141: break;
        case 19: 
          { lexeme=yytext(); return Punto;
          }
        case 142: break;
        case 22: 
          { lexeme=yytext(); return If;
          }
        case 143: break;
        case 58: 
          { lexeme=yytext(); return Type;
          }
        case 144: break;
        case 31: 
          { lexeme=yytext(); return RestaDoble;
          }
        case 145: break;
        case 32: 
          { lexeme=yytext(); return RestaS;
          }
        case 146: break;
        case 81: 
          { lexeme=yytext(); return Program;
          }
        case 147: break;
        case 76: 
          { lexeme=yytext(); return Downto;
          }
        case 148: break;
        case 71: 
          { lexeme=yytext(); return Until;
          }
        case 149: break;
        case 83: 
          { lexeme=yytext(); return Function;
          }
        case 150: break;
        case 61: 
          { lexeme=yytext(); return Char;
          }
        case 151: break;
        case 3: 
          { lexeme=yytext(); return Literal;
          }
        case 152: break;
        case 16: 
          { lexeme=yytext(); return CorcheteA;
          }
        case 153: break;
        case 65: 
          { lexeme=yytext(); return Begin;
          }
        case 154: break;
        case 39: 
          { lexeme=yytext(); return And;
          }
        case 155: break;
        case 68: 
          { lexeme=yytext(); return Write;
          }
        case 156: break;
        case 52: 
          { lexeme=yytext(); return Real;
          }
        case 157: break;
        case 5: 
          { lexeme=yytext(); return Division;
          }
        case 158: break;
        case 25: 
          { lexeme=yytext(); return To;
          }
        case 159: break;
        case 15: 
          { lexeme=yytext(); return Menor;
          }
        case 160: break;
        case 8: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 161: break;
        case 27: 
          { lexeme=yytext(); return DivisionS;
          }
        case 162: break;
        case 37: 
          { lexeme=yytext(); return MenorDoble;
          }
        case 163: break;
        case 36: 
          { lexeme=yytext(); return MenorIgual;
          }
        case 164: break;
        case 40: 
          { lexeme=yytext(); return End;
          }
        case 165: break;
        case 13: 
          { lexeme=yytext(); return Mayor;
          }
        case 166: break;
        case 54: 
          { lexeme=yytext(); return Byte;
          }
        case 167: break;
        case 1: 
          { return Error;
          }
        case 168: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
