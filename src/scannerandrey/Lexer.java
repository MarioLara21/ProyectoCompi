/* The following code was generated by JFlex 1.4.3 on 29/9/23, 1:02 */

package scannerandrey;
import static scannerandrey.Tokens.*;

import java.io.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/9/23, 1:02 from the specification file
 * <tt>C:/Users/XPC/Documents/NetBeansProjects/PruebaScanner/src/pruebascanner/Lexer2.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\33\2\0\1\3\22\0\1\3\1\0\1\60\1\56"+
    "\4\0\1\36\1\40\1\37\1\42\1\3\1\43\1\52\1\32\1\2"+
    "\10\54\1\57\1\51\1\41\1\46\1\45\1\44\2\0\4\1\1\55"+
    "\25\1\1\47\1\0\1\50\1\0\1\1\1\0\1\4\1\7\1\17"+
    "\1\22\1\10\1\24\1\11\1\21\1\12\1\1\1\27\1\15\1\30"+
    "\1\13\1\14\1\26\1\1\1\5\1\20\1\16\1\25\1\31\1\23"+
    "\1\53\1\6\1\1\1\34\1\0\1\35\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\23\2\1\5\1\1"+
    "\7\5\1\2\1\3\2\1\1\2\1\0\11\2\2\6"+
    "\2\2\1\7\12\2\1\6\13\2\1\4\1\0\1\4"+
    "\1\0\1\2\3\0\1\3\1\2\1\3\1\0\21\2"+
    "\1\6\4\2\3\0\16\2\1\4\1\0\7\2\1\0"+
    "\4\2\1\0\172\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\61\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\142\0\u0930\0\u0961\0\142\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u04c9\0\u04c9\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u06b3\0\61\0\u0ebd\0\u0eee\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u0df9\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6"+
    "\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6"+
    "\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e"+
    "\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6"+
    "\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e"+
    "\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6"+
    "\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e"+
    "\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06"+
    "\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e"+
    "\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16"+
    "\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\3\1\22\1\23\1\24\1\25\1\26\1\3"+
    "\1\27\1\30\1\31\1\5\1\32\1\2\1\33\1\34"+
    "\2\35\1\36\1\37\1\40\1\35\1\41\2\35\1\34"+
    "\1\35\1\42\1\43\1\3\1\44\1\43\1\45\62\0"+
    "\1\3\1\46\1\0\26\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\11\0\1\47\44\0\1\47\6\0\1\5"+
    "\27\0\1\5\26\0\1\3\1\46\1\0\1\3\1\50"+
    "\5\3\1\51\16\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\4\3\1\52\21\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\2\3\1\53\1\3\1\54\3\3\1\55"+
    "\15\3\21\0\1\3\1\46\1\3\1\0\1\46\2\0"+
    "\1\3\1\46\1\0\7\3\1\56\1\3\1\57\14\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\10\3\1\60\15\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\7\3"+
    "\1\61\10\3\1\62\5\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\6\3\1\63"+
    "\1\3\1\64\15\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\1\3\1\65\16\3"+
    "\1\62\5\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\1\66\7\3\1\67\15\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\1\3\1\70\1\71\5\3\1\62\4\3"+
    "\1\72\10\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\1\57\7\3\1\73\4\3"+
    "\1\30\10\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\4\3\1\74\5\3\1\75"+
    "\2\3\1\76\10\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\6\3\1\77\1\3"+
    "\1\100\15\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\1\3\1\101\4\3\1\102"+
    "\6\3\1\103\10\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\1\104\5\3\1\105"+
    "\1\3\1\106\10\3\1\107\4\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\7\3"+
    "\1\110\16\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\1\111\1\112\24\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\10\3\1\51\15\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\1\113\25\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\33\0\1\114"+
    "\12\0\1\35\13\0\33\115\1\0\1\115\1\116\23\115"+
    "\37\0\1\117\66\0\1\35\55\0\1\35\2\0\1\35"+
    "\56\0\1\35\1\0\1\35\57\0\1\34\1\35\57\0"+
    "\2\35\1\34\13\0\1\3\1\46\1\0\10\3\1\120"+
    "\15\3\21\0\1\3\1\46\1\3\1\0\1\46\3\0"+
    "\1\43\5\0\1\47\41\0\1\121\1\0\1\43\1\47"+
    "\1\0\1\43\50\0\1\122\11\0\33\123\1\0\24\123"+
    "\1\124\1\0\1\125\1\46\1\0\26\125\21\0\1\125"+
    "\1\46\1\125\1\0\1\46\3\0\1\126\37\0\2\127"+
    "\10\0\1\126\2\0\1\126\2\0\1\3\1\46\1\0"+
    "\1\3\1\130\24\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\16\3\1\65\7\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\1\131\12\3\1\132\6\3\1\133\3\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\12\3\1\134\13\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\5\3"+
    "\1\135\20\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\10\3\1\136\15\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\16\3\1\62\7\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\14\3\1\134"+
    "\11\3\21\0\1\3\1\46\1\3\1\0\1\46\2\0"+
    "\1\3\1\46\1\0\12\3\1\137\13\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\3\1\46\1\0"+
    "\11\3\1\140\1\62\13\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\11\3\1\62"+
    "\14\3\21\0\1\3\1\46\1\3\1\0\1\46\2\0"+
    "\1\3\1\46\1\0\12\3\1\65\13\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\3\1\46\1\0"+
    "\3\3\1\141\22\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\7\3\1\142\16\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\21\3\1\134\4\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\22\3"+
    "\1\134\3\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\4\3\1\143\21\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\7\3\1\144\16\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\12\3\1\62"+
    "\13\3\21\0\1\3\1\46\1\3\1\0\1\46\2\0"+
    "\1\3\1\46\1\0\1\3\1\145\24\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\3\1\46\1\0"+
    "\10\3\1\146\15\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\25\3\1\65\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\17\3\1\147\6\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\6\3\1\53"+
    "\17\3\21\0\1\3\1\46\1\3\1\0\1\46\2\0"+
    "\1\3\1\46\1\0\12\3\1\150\13\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\3\1\46\1\0"+
    "\6\3\1\105\17\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\11\3\1\57\14\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\11\3\1\134\14\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\1\3"+
    "\1\151\24\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\7\3\1\152\16\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\12\3\1\153\13\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\13\3\1\154"+
    "\12\3\21\0\1\3\1\46\1\3\1\0\1\46\2\0"+
    "\1\3\1\46\1\0\10\3\1\155\15\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\3\1\46\1\0"+
    "\1\3\1\62\24\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\1\0\33\114\1\0\25\114\33\117\1\0\3\117"+
    "\1\156\21\117\1\0\1\3\1\46\1\0\1\3\1\65"+
    "\24\3\21\0\1\3\1\46\1\3\1\0\1\46\3\0"+
    "\1\157\51\0\1\157\2\0\1\157\3\0\1\160\57\0"+
    "\1\125\1\161\1\0\26\125\21\0\1\125\1\161\1\125"+
    "\1\0\1\161\3\0\1\126\51\0\1\126\2\0\1\126"+
    "\2\0\1\3\1\46\1\0\1\162\25\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\3\1\46\1\0"+
    "\11\3\1\62\4\3\1\62\7\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\10\3"+
    "\1\163\15\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\4\3\1\164\21\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\4\3\1\62\21\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\6\3\1\143"+
    "\17\3\21\0\1\3\1\46\1\3\1\0\1\46\2\0"+
    "\1\3\1\46\1\0\11\3\1\165\14\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\3\1\46\1\0"+
    "\10\3\1\62\15\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\6\3\1\166\17\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\4\3\1\63\21\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\5\3"+
    "\1\167\20\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\7\3\1\62\16\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\14\3\1\74\11\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\6\3\1\170"+
    "\17\3\21\0\1\3\1\46\1\3\1\0\1\46\2\0"+
    "\1\3\1\46\1\0\1\3\1\171\24\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\3\1\46\1\0"+
    "\7\3\1\60\16\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\15\3\1\62\10\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\17\3\1\172\6\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\13\3"+
    "\1\173\12\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\6\3\1\63\17\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\23\3\1\174\2\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\2\0\1\3\1\46\1\0\5\3\1\175"+
    "\5\3\1\176\12\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\1\0\33\117\1\0\3\117\1\156\1\177\20\117"+
    "\2\0\1\157\5\0\1\47\43\0\1\157\1\47\1\0"+
    "\1\157\44\0\1\200\16\0\1\201\1\161\1\0\26\201"+
    "\21\0\1\201\1\161\1\201\1\0\1\161\2\0\1\3"+
    "\1\46\1\0\2\3\1\62\23\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\1\3"+
    "\1\56\24\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\1\74\25\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\3\1\46\1\0"+
    "\4\3\1\202\21\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\7\3\1\134\16\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\6\3\1\203\17\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\7\3"+
    "\1\204\16\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\12\3\1\167\13\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\1\163\25\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\12\3\1\205\13\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\4\3\1\56\21\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\1\3"+
    "\1\206\24\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\4\3\1\207\21\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\60\0\1\210\2\0"+
    "\1\201\1\211\1\0\26\201\21\0\1\201\1\211\1\201"+
    "\1\0\1\211\2\0\1\3\1\46\1\0\1\143\25\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\2\0\1\3"+
    "\1\46\1\0\7\3\1\74\16\3\21\0\1\3\1\46"+
    "\1\3\1\0\1\46\2\0\1\3\1\46\1\0\5\3"+
    "\1\62\20\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\6\3\1\212\17\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\1\213\25\3\21\0\1\3\1\46\1\3\1\0"+
    "\1\46\2\0\1\3\1\46\1\0\16\3\1\214\7\3"+
    "\21\0\1\3\1\46\1\3\1\0\1\46\51\0\1\215"+
    "\11\0\1\216\1\211\1\0\26\216\21\0\1\216\1\211"+
    "\1\216\1\0\1\211\2\0\1\3\1\46\1\0\10\3"+
    "\1\143\15\3\21\0\1\3\1\46\1\3\1\0\1\46"+
    "\2\0\1\3\1\46\1\0\24\3\1\62\1\3\21\0"+
    "\1\3\1\46\1\3\1\0\1\46\2\0\1\3\1\46"+
    "\1\0\21\3\1\217\4\3\21\0\1\3\1\46\1\3"+
    "\1\0\1\46\43\0\1\124\17\0\1\216\1\220\1\0"+
    "\26\216\21\0\1\216\1\220\1\216\1\0\1\220\2\0"+
    "\1\3\1\46\1\0\1\3\1\134\24\3\21\0\1\3"+
    "\1\46\1\3\1\0\1\46\2\0\1\221\1\220\1\0"+
    "\26\221\21\0\1\221\1\220\1\221\1\0\1\220\2\0"+
    "\1\221\1\222\1\0\26\221\21\0\1\221\1\222\1\221"+
    "\1\0\1\222\2\0\1\223\1\222\1\0\26\223\21\0"+
    "\1\223\1\222\1\223\1\0\1\222\2\0\1\223\1\224"+
    "\1\0\26\223\21\0\1\223\1\224\1\223\1\0\1\224"+
    "\2\0\1\225\1\224\1\0\26\225\21\0\1\225\1\224"+
    "\1\225\1\0\1\224\2\0\1\225\1\226\1\0\26\225"+
    "\21\0\1\225\1\226\1\225\1\0\1\226\2\0\1\227"+
    "\1\226\1\0\26\227\21\0\1\227\1\226\1\227\1\0"+
    "\1\226\2\0\1\227\1\230\1\0\26\227\21\0\1\227"+
    "\1\230\1\227\1\0\1\230\2\0\1\231\1\230\1\0"+
    "\26\231\21\0\1\231\1\230\1\231\1\0\1\230\2\0"+
    "\1\231\1\232\1\0\26\231\21\0\1\231\1\232\1\231"+
    "\1\0\1\232\2\0\1\233\1\232\1\0\26\233\21\0"+
    "\1\233\1\232\1\233\1\0\1\232\2\0\1\233\1\234"+
    "\1\0\26\233\21\0\1\233\1\234\1\233\1\0\1\234"+
    "\2\0\1\235\1\234\1\0\26\235\21\0\1\235\1\234"+
    "\1\235\1\0\1\234\2\0\1\235\1\236\1\0\26\235"+
    "\21\0\1\235\1\236\1\235\1\0\1\236\2\0\1\237"+
    "\1\236\1\0\26\237\21\0\1\237\1\236\1\237\1\0"+
    "\1\236\2\0\1\237\1\240\1\0\26\237\21\0\1\237"+
    "\1\240\1\237\1\0\1\240\2\0\1\241\1\240\1\0"+
    "\26\241\21\0\1\241\1\240\1\241\1\0\1\240\2\0"+
    "\1\241\1\242\1\0\26\241\21\0\1\241\1\242\1\241"+
    "\1\0\1\242\2\0\1\243\1\242\1\0\26\243\21\0"+
    "\1\243\1\242\1\243\1\0\1\242\2\0\1\243\1\244"+
    "\1\0\26\243\21\0\1\243\1\244\1\243\1\0\1\244"+
    "\2\0\1\245\1\244\1\0\26\245\21\0\1\245\1\244"+
    "\1\245\1\0\1\244\2\0\1\245\1\246\1\0\26\245"+
    "\21\0\1\245\1\246\1\245\1\0\1\246\2\0\1\247"+
    "\1\246\1\0\26\247\21\0\1\247\1\246\1\247\1\0"+
    "\1\246\2\0\1\247\1\250\1\0\26\247\21\0\1\247"+
    "\1\250\1\247\1\0\1\250\2\0\1\251\1\250\1\0"+
    "\26\251\21\0\1\251\1\250\1\251\1\0\1\250\2\0"+
    "\1\251\1\252\1\0\26\251\21\0\1\251\1\252\1\251"+
    "\1\0\1\252\2\0\1\253\1\252\1\0\26\253\21\0"+
    "\1\253\1\252\1\253\1\0\1\252\2\0\1\253\1\254"+
    "\1\0\26\253\21\0\1\253\1\254\1\253\1\0\1\254"+
    "\2\0\1\255\1\254\1\0\26\255\21\0\1\255\1\254"+
    "\1\255\1\0\1\254\2\0\1\255\1\256\1\0\26\255"+
    "\21\0\1\255\1\256\1\255\1\0\1\256\2\0\1\257"+
    "\1\256\1\0\26\257\21\0\1\257\1\256\1\257\1\0"+
    "\1\256\2\0\1\257\1\260\1\0\26\257\21\0\1\257"+
    "\1\260\1\257\1\0\1\260\2\0\1\261\1\260\1\0"+
    "\26\261\21\0\1\261\1\260\1\261\1\0\1\260\2\0"+
    "\1\261\1\262\1\0\26\261\21\0\1\261\1\262\1\261"+
    "\1\0\1\262\2\0\1\263\1\262\1\0\26\263\21\0"+
    "\1\263\1\262\1\263\1\0\1\262\2\0\1\263\1\264"+
    "\1\0\26\263\21\0\1\263\1\264\1\263\1\0\1\264"+
    "\2\0\1\265\1\264\1\0\26\265\21\0\1\265\1\264"+
    "\1\265\1\0\1\264\2\0\1\265\1\266\1\0\26\265"+
    "\21\0\1\265\1\266\1\265\1\0\1\266\2\0\1\267"+
    "\1\266\1\0\26\267\21\0\1\267\1\266\1\267\1\0"+
    "\1\266\2\0\1\267\1\270\1\0\26\267\21\0\1\267"+
    "\1\270\1\267\1\0\1\270\2\0\1\271\1\270\1\0"+
    "\26\271\21\0\1\271\1\270\1\271\1\0\1\270\2\0"+
    "\1\271\1\272\1\0\26\271\21\0\1\271\1\272\1\271"+
    "\1\0\1\272\2\0\1\273\1\272\1\0\26\273\21\0"+
    "\1\273\1\272\1\273\1\0\1\272\2\0\1\273\1\274"+
    "\1\0\26\273\21\0\1\273\1\274\1\273\1\0\1\274"+
    "\2\0\1\275\1\274\1\0\26\275\21\0\1\275\1\274"+
    "\1\275\1\0\1\274\2\0\1\275\1\276\1\0\26\275"+
    "\21\0\1\275\1\276\1\275\1\0\1\276\2\0\1\277"+
    "\1\276\1\0\26\277\21\0\1\277\1\276\1\277\1\0"+
    "\1\276\2\0\1\277\1\300\1\0\26\277\21\0\1\277"+
    "\1\300\1\277\1\0\1\300\2\0\1\301\1\300\1\0"+
    "\26\301\21\0\1\301\1\300\1\301\1\0\1\300\2\0"+
    "\1\301\1\302\1\0\26\301\21\0\1\301\1\302\1\301"+
    "\1\0\1\302\2\0\1\303\1\302\1\0\26\303\21\0"+
    "\1\303\1\302\1\303\1\0\1\302\2\0\1\303\1\304"+
    "\1\0\26\303\21\0\1\303\1\304\1\303\1\0\1\304"+
    "\2\0\1\305\1\304\1\0\26\305\21\0\1\305\1\304"+
    "\1\305\1\0\1\304\2\0\1\305\1\306\1\0\26\305"+
    "\21\0\1\305\1\306\1\305\1\0\1\306\2\0\1\307"+
    "\1\306\1\0\26\307\21\0\1\307\1\306\1\307\1\0"+
    "\1\306\2\0\1\307\1\310\1\0\26\307\21\0\1\307"+
    "\1\310\1\307\1\0\1\310\2\0\1\311\1\310\1\0"+
    "\26\311\21\0\1\311\1\310\1\311\1\0\1\310\2\0"+
    "\1\311\1\312\1\0\26\311\21\0\1\311\1\312\1\311"+
    "\1\0\1\312\2\0\1\313\1\312\1\0\26\313\21\0"+
    "\1\313\1\312\1\313\1\0\1\312\2\0\1\313\1\314"+
    "\1\0\26\313\21\0\1\313\1\314\1\313\1\0\1\314"+
    "\2\0\1\315\1\314\1\0\26\315\21\0\1\315\1\314"+
    "\1\315\1\0\1\314\2\0\1\315\1\316\1\0\26\315"+
    "\21\0\1\315\1\316\1\315\1\0\1\316\2\0\1\317"+
    "\1\316\1\0\26\317\21\0\1\317\1\316\1\317\1\0"+
    "\1\316\2\0\1\317\1\320\1\0\26\317\21\0\1\317"+
    "\1\320\1\317\1\0\1\320\2\0\1\321\1\320\1\0"+
    "\26\321\21\0\1\321\1\320\1\321\1\0\1\320\2\0"+
    "\1\321\1\322\1\0\26\321\21\0\1\321\1\322\1\321"+
    "\1\0\1\322\2\0\1\323\1\322\1\0\26\323\21\0"+
    "\1\323\1\322\1\323\1\0\1\322\2\0\1\323\1\324"+
    "\1\0\26\323\21\0\1\323\1\324\1\323\1\0\1\324"+
    "\2\0\1\325\1\324\1\0\26\325\21\0\1\325\1\324"+
    "\1\325\1\0\1\324\2\0\1\325\1\326\1\0\26\325"+
    "\21\0\1\325\1\326\1\325\1\0\1\326\2\0\1\327"+
    "\1\326\1\0\26\327\21\0\1\327\1\326\1\327\1\0"+
    "\1\326\2\0\1\327\1\330\1\0\26\327\21\0\1\327"+
    "\1\330\1\327\1\0\1\330\2\0\1\331\1\330\1\0"+
    "\26\331\21\0\1\331\1\330\1\331\1\0\1\330\2\0"+
    "\1\331\1\332\1\0\26\331\21\0\1\331\1\332\1\331"+
    "\1\0\1\332\2\0\1\333\1\332\1\0\26\333\21\0"+
    "\1\333\1\332\1\333\1\0\1\332\2\0\1\333\1\334"+
    "\1\0\26\333\21\0\1\333\1\334\1\333\1\0\1\334"+
    "\2\0\1\335\1\334\1\0\26\335\21\0\1\335\1\334"+
    "\1\335\1\0\1\334\2\0\1\335\1\336\1\0\26\335"+
    "\21\0\1\335\1\336\1\335\1\0\1\336\2\0\1\337"+
    "\1\336\1\0\26\337\21\0\1\337\1\336\1\337\1\0"+
    "\1\336\2\0\1\337\1\340\1\0\26\337\21\0\1\337"+
    "\1\340\1\337\1\0\1\340\2\0\1\341\1\340\1\0"+
    "\26\341\21\0\1\341\1\340\1\341\1\0\1\340\2\0"+
    "\1\341\1\342\1\0\26\341\21\0\1\341\1\342\1\341"+
    "\1\0\1\342\2\0\1\343\1\342\1\0\26\343\21\0"+
    "\1\343\1\342\1\343\1\0\1\342\2\0\1\343\1\344"+
    "\1\0\26\343\21\0\1\343\1\344\1\343\1\0\1\344"+
    "\2\0\1\345\1\344\1\0\26\345\21\0\1\345\1\344"+
    "\1\345\1\0\1\344\2\0\1\345\1\346\1\0\26\345"+
    "\21\0\1\345\1\346\1\345\1\0\1\346\2\0\1\347"+
    "\1\346\1\0\26\347\21\0\1\347\1\346\1\347\1\0"+
    "\1\346\2\0\1\347\1\350\1\0\26\347\21\0\1\347"+
    "\1\350\1\347\1\0\1\350\2\0\1\351\1\350\1\0"+
    "\26\351\21\0\1\351\1\350\1\351\1\0\1\350\2\0"+
    "\1\351\1\352\1\0\26\351\21\0\1\351\1\352\1\351"+
    "\1\0\1\352\2\0\1\353\1\352\1\0\26\353\21\0"+
    "\1\353\1\352\1\353\1\0\1\352\2\0\1\353\1\354"+
    "\1\0\26\353\21\0\1\353\1\354\1\353\1\0\1\354"+
    "\2\0\1\355\1\354\1\0\26\355\21\0\1\355\1\354"+
    "\1\355\1\0\1\354\2\0\1\355\1\356\1\0\26\355"+
    "\21\0\1\355\1\356\1\355\1\0\1\356\2\0\1\357"+
    "\1\356\1\0\26\357\21\0\1\357\1\356\1\357\1\0"+
    "\1\356\2\0\1\357\1\360\1\0\26\357\21\0\1\357"+
    "\1\360\1\357\1\0\1\360\2\0\1\361\1\360\1\0"+
    "\26\361\21\0\1\361\1\360\1\361\1\0\1\360\2\0"+
    "\1\361\1\362\1\0\26\361\21\0\1\361\1\362\1\361"+
    "\1\0\1\362\2\0\1\363\1\362\1\0\26\363\21\0"+
    "\1\363\1\362\1\363\1\0\1\362\2\0\1\363\1\364"+
    "\1\0\26\363\21\0\1\363\1\364\1\363\1\0\1\364"+
    "\2\0\1\365\1\364\1\0\26\365\21\0\1\365\1\364"+
    "\1\365\1\0\1\364\2\0\1\365\1\366\1\0\26\365"+
    "\21\0\1\365\1\366\1\365\1\0\1\366\2\0\1\367"+
    "\1\366\1\0\26\367\21\0\1\367\1\366\1\367\1\0"+
    "\1\366\2\0\1\367\1\370\1\0\26\367\21\0\1\367"+
    "\1\370\1\367\1\0\1\370\2\0\1\371\1\370\1\0"+
    "\26\371\21\0\1\371\1\370\1\371\1\0\1\370\2\0"+
    "\1\371\1\372\1\0\26\371\21\0\1\371\1\372\1\371"+
    "\1\0\1\372\2\0\1\373\1\372\1\0\26\373\21\0"+
    "\1\373\1\372\1\373\1\0\1\372\2\0\1\373\1\374"+
    "\1\0\26\373\21\0\1\373\1\374\1\373\1\0\1\374"+
    "\2\0\1\375\1\374\1\0\26\375\21\0\1\375\1\374"+
    "\1\375\1\0\1\374\2\0\1\375\1\376\1\0\26\375"+
    "\21\0\1\375\1\376\1\375\1\0\1\376\2\0\1\377"+
    "\1\376\1\0\26\377\21\0\1\377\1\376\1\377\1\0"+
    "\1\376\2\0\1\377\1\u0100\1\0\26\377\21\0\1\377"+
    "\1\u0100\1\377\1\0\1\u0100\2\0\1\u0101\1\u0100\1\0"+
    "\26\u0101\21\0\1\u0101\1\u0100\1\u0101\1\0\1\u0100\2\0"+
    "\1\u0101\1\u0102\1\0\26\u0101\21\0\1\u0101\1\u0102\1\u0101"+
    "\1\0\1\u0102\2\0\1\u0103\1\u0102\1\0\26\u0103\21\0"+
    "\1\u0103\1\u0102\1\u0103\1\0\1\u0102\2\0\1\u0103\1\u0104"+
    "\1\0\26\u0103\21\0\1\u0103\1\u0104\1\u0103\1\0\1\u0104"+
    "\2\0\1\u0105\1\u0104\1\0\26\u0105\21\0\1\u0105\1\u0104"+
    "\1\u0105\1\0\1\u0104\2\0\1\u0105\1\u0106\1\0\26\u0105"+
    "\21\0\1\u0105\1\u0106\1\u0105\1\0\1\u0106\2\0\1\u0107"+
    "\1\u0106\1\0\26\u0107\21\0\1\u0107\1\u0106\1\u0107\1\0"+
    "\1\u0106\2\0\1\u0107\2\0\26\u0107\21\0\1\u0107\1\0"+
    "\1\u0107\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12446];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\32\1\1\11\11\1\1\0\45\1\1\0"+
    "\1\1\1\0\1\1\3\0\1\11\2\1\1\0\26\1"+
    "\3\0\17\1\1\0\7\1\1\0\4\1\1\0\172\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /*Ignore*/
          }
        case 8: break;
        case 7: 
          { lexeme=yytext(); return OperadorReservado;
          }
        case 9: break;
        case 6: 
          { lexeme=yytext(); return Reservada;
          }
        case 10: break;
        case 5: 
          { lexeme=yytext(); return Operador;
          }
        case 11: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 12: break;
        case 1: 
          { return Error;
          }
        case 13: break;
        case 3: 
          { lexeme=yytext(); return Literal;
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
