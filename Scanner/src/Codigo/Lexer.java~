/* The following code was generated by JFlex 1.4.3 on 29/9/23, 09:29 */

/*Codigo del usuario*/
package Codigo;
import static Codigo.Tokens.*;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/9/23, 09:29 from the specification file
 * <tt>G:/ReposGit/ProyectoCompi/Scanner/src/Codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\33\2\0\1\3\22\0\1\57\1\56\1\55\1\54"+
    "\1\56\1\56\1\56\1\0\1\34\1\36\1\35\1\42\1\3\1\43"+
    "\1\50\1\32\1\2\11\52\1\47\1\41\1\46\1\45\1\44\1\0"+
    "\1\56\4\1\1\53\25\1\1\41\1\0\1\41\1\0\1\1\1\56"+
    "\1\4\1\7\1\17\1\22\1\10\1\24\1\11\1\21\1\12\1\1"+
    "\1\27\1\15\1\30\1\13\1\14\1\26\1\1\1\5\1\20\1\16"+
    "\1\25\1\31\1\23\1\51\1\6\1\1\1\37\1\0\1\40\1\56"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\23\2\4\5\1\1"+
    "\6\5\1\2\1\3\3\1\1\2\1\6\1\0\1\6"+
    "\1\3\1\6\11\2\2\7\2\2\1\10\12\2\1\7"+
    "\13\2\1\4\3\0\1\4\1\5\1\6\1\0\1\2"+
    "\1\3\1\0\1\6\1\3\1\2\1\3\1\6\21\2"+
    "\1\7\4\2\1\0\1\6\1\0\1\2\1\6\15\2"+
    "\1\4\1\2\1\6\204\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\60\0\u0510\0\u0540\0\u0570\0\u05a0"+
    "\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\60\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\140\0\u0a20\0\u0a50\0\140\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0720\0\u0510\0\u0510\0\u0720"+
    "\0\u0630\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\60\0\u0ff0"+
    "\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170"+
    "\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0"+
    "\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470"+
    "\0\u14a0\0\u14d0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0"+
    "\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740"+
    "\0\u1770\0\u17a0\0\u0ed0\0\u17d0\0\u0f60\0\u1800\0\u1830\0\u1860"+
    "\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0"+
    "\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60"+
    "\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0"+
    "\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160"+
    "\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0\0\u22e0"+
    "\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460"+
    "\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0\0\u25e0"+
    "\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730\0\u2760"+
    "\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0"+
    "\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30\0\u2a60"+
    "\0\u2a90\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0\0\u2be0"+
    "\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30\0\u2d60"+
    "\0\u2d90\0\u2dc0\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\u2eb0\0\u2ee0"+
    "\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060"+
    "\0\u3090";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\3\1\22\1\23\1\24\1\25\1\26\1\3"+
    "\1\27\1\30\1\31\1\5\1\32\1\33\1\34\1\35"+
    "\1\2\1\34\1\36\1\37\1\40\1\34\1\41\1\42"+
    "\1\43\1\44\1\45\1\3\1\46\1\47\1\50\1\5"+
    "\61\0\1\3\1\51\1\0\26\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\54\1\55"+
    "\1\0\26\54\16\0\1\56\1\54\1\55\1\54\7\0"+
    "\1\5\27\0\1\5\23\0\1\5\1\0\1\3\1\51"+
    "\1\0\1\3\1\57\5\3\1\60\16\3\17\0\1\3"+
    "\1\51\1\3\1\0\1\52\1\0\1\53\1\0\1\3"+
    "\1\51\1\0\4\3\1\61\21\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\2\3\1\62\1\3\1\63\3\3\1\64\15\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\7\3\1\65\1\3\1\66"+
    "\14\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\10\3\1\67\15\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\7\3\1\70\10\3\1\71"+
    "\5\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\6\3\1\72\1\3"+
    "\1\73\15\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\1\3\1\74"+
    "\16\3\1\71\5\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\1\75"+
    "\7\3\1\76\15\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\1\3"+
    "\1\77\1\100\5\3\1\71\4\3\1\101\10\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\1\0"+
    "\1\3\1\51\1\0\1\66\7\3\1\102\4\3\1\30"+
    "\10\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\4\3\1\103\5\3"+
    "\1\104\2\3\1\105\10\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\6\3\1\106\1\3\1\107\15\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\1\3\1\110\4\3\1\111\6\3\1\112\10\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\1\113\5\3\1\114\1\3"+
    "\1\115\10\3\1\116\4\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\7\3\1\117\16\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\1\120"+
    "\1\121\24\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\10\3\1\60"+
    "\15\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\1\122\25\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\32\0"+
    "\1\123\12\0\1\34\47\0\1\124\23\0\1\54\2\0"+
    "\26\54\3\0\1\125\4\0\2\125\1\0\1\34\3\0"+
    "\1\54\1\0\1\54\1\125\1\0\1\125\1\0\40\126"+
    "\1\127\17\126\1\0\1\54\2\0\26\54\3\0\1\125"+
    "\4\0\1\130\1\125\1\0\1\34\3\0\1\54\1\0"+
    "\1\54\1\125\1\0\1\125\2\0\1\54\2\0\26\54"+
    "\3\0\1\125\4\0\1\125\1\130\1\0\1\34\3\0"+
    "\1\54\1\0\1\54\1\125\1\0\1\125\45\0\1\42"+
    "\1\34\56\0\2\34\1\42\56\0\1\34\14\0\1\131"+
    "\5\0\1\132\41\0\1\131\1\132\5\0\1\3\1\51"+
    "\1\0\10\3\1\133\15\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\54\1\45\1\0"+
    "\26\54\16\0\1\56\1\54\1\45\1\54\5\0\1\54"+
    "\1\134\1\0\26\54\3\0\1\125\4\0\2\125\5\0"+
    "\1\54\1\134\1\54\1\125\1\0\1\125\1\0\1\135"+
    "\1\136\2\135\26\136\1\135\1\0\15\135\1\136\1\135"+
    "\1\136\1\135\1\137\2\135\1\0\1\54\2\0\26\54"+
    "\3\0\1\125\4\0\2\125\5\0\1\54\1\0\1\54"+
    "\1\125\1\0\1\125\2\0\1\140\1\51\1\0\26\140"+
    "\17\0\1\140\1\51\1\140\5\0\1\53\2\0\26\53"+
    "\17\0\1\53\1\0\1\53\1\0\1\52\1\0\1\53"+
    "\1\0\1\54\2\0\26\54\17\0\1\54\1\0\1\54"+
    "\5\0\1\54\1\55\1\0\26\54\16\0\1\52\1\54"+
    "\1\55\1\54\6\0\1\141\5\0\1\142\41\0\1\141"+
    "\1\142\5\0\1\3\1\51\1\0\1\3\1\143\24\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\16\3\1\74\7\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\1\0"+
    "\1\3\1\51\1\0\1\144\12\3\1\145\6\3\1\146"+
    "\3\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\12\3\1\147\13\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\5\3\1\150\20\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\1\0"+
    "\1\3\1\51\1\0\10\3\1\151\15\3\17\0\1\3"+
    "\1\51\1\3\1\0\1\52\1\0\1\53\1\0\1\3"+
    "\1\51\1\0\16\3\1\71\7\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\14\3\1\147\11\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\12\3\1\152\13\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\11\3"+
    "\1\153\1\71\13\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\11\3"+
    "\1\71\14\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\12\3\1\74"+
    "\13\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\3\3\1\154\22\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\7\3\1\155\16\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\1\0"+
    "\1\3\1\51\1\0\21\3\1\147\4\3\17\0\1\3"+
    "\1\51\1\3\1\0\1\52\1\0\1\53\1\0\1\3"+
    "\1\51\1\0\22\3\1\147\3\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\4\3\1\156\21\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\7\3\1\157\16\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\12\3"+
    "\1\71\13\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\1\3\1\160"+
    "\24\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\10\3\1\161\15\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\25\3\1\74\17\0\1\3"+
    "\1\51\1\3\1\0\1\52\1\0\1\53\1\0\1\3"+
    "\1\51\1\0\17\3\1\162\6\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\6\3\1\62\17\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\12\3\1\163\13\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\6\3"+
    "\1\114\17\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\11\3\1\66"+
    "\14\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\11\3\1\147\14\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\1\3\1\164\24\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\1\0"+
    "\1\3\1\51\1\0\7\3\1\165\16\3\17\0\1\3"+
    "\1\51\1\3\1\0\1\52\1\0\1\53\1\0\1\3"+
    "\1\51\1\0\12\3\1\166\13\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\13\3\1\167\12\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\10\3\1\170\15\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\1\3"+
    "\1\71\24\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\33\123\1\0\24\123\35\124\1\171\22\124"+
    "\2\0\1\172\37\0\2\173\6\0\1\172\6\0\1\3"+
    "\1\51\1\0\1\3\1\74\24\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\2\0\1\134\47\0"+
    "\1\134\5\0\33\135\1\0\21\135\1\137\3\135\1\136"+
    "\2\135\26\136\1\135\1\0\15\135\1\136\1\135\1\136"+
    "\1\135\1\137\1\135\1\136\1\0\1\140\1\174\1\0"+
    "\26\140\17\0\1\140\1\174\1\140\6\0\1\141\5\0"+
    "\1\175\41\0\1\141\1\175\46\0\2\52\15\0\1\3"+
    "\1\51\1\0\1\176\25\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\11\3\1\71\4\3\1\71\7\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\10\3\1\177\15\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\4\3\1\200\21\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\4\3"+
    "\1\71\21\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\6\3\1\156"+
    "\17\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\11\3\1\201\14\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\10\3\1\71\15\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\1\0"+
    "\1\3\1\51\1\0\6\3\1\202\17\3\17\0\1\3"+
    "\1\51\1\3\1\0\1\52\1\0\1\53\1\0\1\3"+
    "\1\51\1\0\4\3\1\72\21\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\5\3\1\203\20\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\7\3\1\71\16\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\14\3"+
    "\1\103\11\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\6\3\1\204"+
    "\17\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\1\3\1\205\24\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\7\3\1\67\16\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\1\0"+
    "\1\3\1\51\1\0\15\3\1\71\10\3\17\0\1\3"+
    "\1\51\1\3\1\0\1\52\1\0\1\53\1\0\1\3"+
    "\1\51\1\0\17\3\1\206\6\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\13\3\1\207\12\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\6\3\1\72\17\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\23\3"+
    "\1\210\2\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\5\3\1\211"+
    "\5\3\1\212\12\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\35\124\1\171\1\213\21\124\2\0"+
    "\1\172\47\0\1\172\6\0\1\214\1\174\1\0\26\214"+
    "\17\0\1\214\1\174\1\214\6\0\1\134\37\0\2\215"+
    "\6\0\1\134\6\0\1\3\1\51\1\0\2\3\1\71"+
    "\23\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\1\3\1\65\24\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\1\103\25\3\17\0\1\3"+
    "\1\51\1\3\1\0\1\52\1\0\1\53\1\0\1\3"+
    "\1\51\1\0\4\3\1\216\21\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\7\3\1\147\16\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\6\3\1\217\17\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\7\3"+
    "\1\220\16\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\12\3\1\203"+
    "\13\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\1\177\25\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\1\0"+
    "\1\3\1\51\1\0\12\3\1\221\13\3\17\0\1\3"+
    "\1\51\1\3\1\0\1\52\1\0\1\53\1\0\1\3"+
    "\1\51\1\0\4\3\1\65\21\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\1\3\1\222\24\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\4\3\1\223\21\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\214\1\224\1\0\26\214"+
    "\17\0\1\214\1\224\1\214\5\0\1\3\1\51\1\0"+
    "\1\156\25\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\3\1\51\1\0\7\3\1\103"+
    "\16\3\17\0\1\3\1\51\1\3\1\0\1\52\1\0"+
    "\1\53\1\0\1\3\1\51\1\0\5\3\1\71\20\3"+
    "\17\0\1\3\1\51\1\3\1\0\1\52\1\0\1\53"+
    "\1\0\1\3\1\51\1\0\6\3\1\225\17\3\17\0"+
    "\1\3\1\51\1\3\1\0\1\52\1\0\1\53\1\0"+
    "\1\3\1\51\1\0\1\226\25\3\17\0\1\3\1\51"+
    "\1\3\1\0\1\52\1\0\1\53\1\0\1\3\1\51"+
    "\1\0\16\3\1\227\7\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\230\1\224\1\0"+
    "\26\230\17\0\1\230\1\224\1\230\5\0\1\3\1\51"+
    "\1\0\10\3\1\156\15\3\17\0\1\3\1\51\1\3"+
    "\1\0\1\52\1\0\1\53\1\0\1\3\1\51\1\0"+
    "\24\3\1\71\1\3\17\0\1\3\1\51\1\3\1\0"+
    "\1\52\1\0\1\53\1\0\1\3\1\51\1\0\21\3"+
    "\1\231\4\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\230\1\232\1\0\26\230\17\0"+
    "\1\230\1\232\1\230\5\0\1\3\1\51\1\0\1\3"+
    "\1\147\24\3\17\0\1\3\1\51\1\3\1\0\1\52"+
    "\1\0\1\53\1\0\1\233\1\232\1\0\26\233\17\0"+
    "\1\233\1\232\1\233\5\0\1\233\1\234\1\0\26\233"+
    "\17\0\1\233\1\234\1\233\5\0\1\235\1\234\1\0"+
    "\26\235\17\0\1\235\1\234\1\235\5\0\1\235\1\236"+
    "\1\0\26\235\17\0\1\235\1\236\1\235\5\0\1\237"+
    "\1\236\1\0\26\237\17\0\1\237\1\236\1\237\5\0"+
    "\1\237\1\240\1\0\26\237\17\0\1\237\1\240\1\237"+
    "\5\0\1\241\1\240\1\0\26\241\17\0\1\241\1\240"+
    "\1\241\5\0\1\241\1\242\1\0\26\241\17\0\1\241"+
    "\1\242\1\241\5\0\1\243\1\242\1\0\26\243\17\0"+
    "\1\243\1\242\1\243\5\0\1\243\1\244\1\0\26\243"+
    "\17\0\1\243\1\244\1\243\5\0\1\245\1\244\1\0"+
    "\26\245\17\0\1\245\1\244\1\245\5\0\1\245\1\246"+
    "\1\0\26\245\17\0\1\245\1\246\1\245\5\0\1\247"+
    "\1\246\1\0\26\247\17\0\1\247\1\246\1\247\5\0"+
    "\1\247\1\250\1\0\26\247\17\0\1\247\1\250\1\247"+
    "\5\0\1\251\1\250\1\0\26\251\17\0\1\251\1\250"+
    "\1\251\5\0\1\251\1\252\1\0\26\251\17\0\1\251"+
    "\1\252\1\251\5\0\1\253\1\252\1\0\26\253\17\0"+
    "\1\253\1\252\1\253\5\0\1\253\1\254\1\0\26\253"+
    "\17\0\1\253\1\254\1\253\5\0\1\255\1\254\1\0"+
    "\26\255\17\0\1\255\1\254\1\255\5\0\1\255\1\256"+
    "\1\0\26\255\17\0\1\255\1\256\1\255\5\0\1\257"+
    "\1\256\1\0\26\257\17\0\1\257\1\256\1\257\5\0"+
    "\1\257\1\260\1\0\26\257\17\0\1\257\1\260\1\257"+
    "\5\0\1\261\1\260\1\0\26\261\17\0\1\261\1\260"+
    "\1\261\5\0\1\261\1\262\1\0\26\261\17\0\1\261"+
    "\1\262\1\261\5\0\1\263\1\262\1\0\26\263\17\0"+
    "\1\263\1\262\1\263\5\0\1\263\1\264\1\0\26\263"+
    "\17\0\1\263\1\264\1\263\5\0\1\265\1\264\1\0"+
    "\26\265\17\0\1\265\1\264\1\265\5\0\1\265\1\266"+
    "\1\0\26\265\17\0\1\265\1\266\1\265\5\0\1\267"+
    "\1\266\1\0\26\267\17\0\1\267\1\266\1\267\5\0"+
    "\1\267\1\270\1\0\26\267\17\0\1\267\1\270\1\267"+
    "\5\0\1\271\1\270\1\0\26\271\17\0\1\271\1\270"+
    "\1\271\5\0\1\271\1\272\1\0\26\271\17\0\1\271"+
    "\1\272\1\271\5\0\1\273\1\272\1\0\26\273\17\0"+
    "\1\273\1\272\1\273\5\0\1\273\1\274\1\0\26\273"+
    "\17\0\1\273\1\274\1\273\5\0\1\275\1\274\1\0"+
    "\26\275\17\0\1\275\1\274\1\275\5\0\1\275\1\276"+
    "\1\0\26\275\17\0\1\275\1\276\1\275\5\0\1\277"+
    "\1\276\1\0\26\277\17\0\1\277\1\276\1\277\5\0"+
    "\1\277\1\300\1\0\26\277\17\0\1\277\1\300\1\277"+
    "\5\0\1\301\1\300\1\0\26\301\17\0\1\301\1\300"+
    "\1\301\5\0\1\301\1\302\1\0\26\301\17\0\1\301"+
    "\1\302\1\301\5\0\1\303\1\302\1\0\26\303\17\0"+
    "\1\303\1\302\1\303\5\0\1\303\1\304\1\0\26\303"+
    "\17\0\1\303\1\304\1\303\5\0\1\305\1\304\1\0"+
    "\26\305\17\0\1\305\1\304\1\305\5\0\1\305\1\306"+
    "\1\0\26\305\17\0\1\305\1\306\1\305\5\0\1\307"+
    "\1\306\1\0\26\307\17\0\1\307\1\306\1\307\5\0"+
    "\1\307\1\310\1\0\26\307\17\0\1\307\1\310\1\307"+
    "\5\0\1\311\1\310\1\0\26\311\17\0\1\311\1\310"+
    "\1\311\5\0\1\311\1\312\1\0\26\311\17\0\1\311"+
    "\1\312\1\311\5\0\1\313\1\312\1\0\26\313\17\0"+
    "\1\313\1\312\1\313\5\0\1\313\1\314\1\0\26\313"+
    "\17\0\1\313\1\314\1\313\5\0\1\315\1\314\1\0"+
    "\26\315\17\0\1\315\1\314\1\315\5\0\1\315\1\316"+
    "\1\0\26\315\17\0\1\315\1\316\1\315\5\0\1\317"+
    "\1\316\1\0\26\317\17\0\1\317\1\316\1\317\5\0"+
    "\1\317\1\320\1\0\26\317\17\0\1\317\1\320\1\317"+
    "\5\0\1\321\1\320\1\0\26\321\17\0\1\321\1\320"+
    "\1\321\5\0\1\321\1\322\1\0\26\321\17\0\1\321"+
    "\1\322\1\321\5\0\1\323\1\322\1\0\26\323\17\0"+
    "\1\323\1\322\1\323\5\0\1\323\1\324\1\0\26\323"+
    "\17\0\1\323\1\324\1\323\5\0\1\325\1\324\1\0"+
    "\26\325\17\0\1\325\1\324\1\325\5\0\1\325\1\326"+
    "\1\0\26\325\17\0\1\325\1\326\1\325\5\0\1\327"+
    "\1\326\1\0\26\327\17\0\1\327\1\326\1\327\5\0"+
    "\1\327\1\330\1\0\26\327\17\0\1\327\1\330\1\327"+
    "\5\0\1\331\1\330\1\0\26\331\17\0\1\331\1\330"+
    "\1\331\5\0\1\331\1\332\1\0\26\331\17\0\1\331"+
    "\1\332\1\331\5\0\1\333\1\332\1\0\26\333\17\0"+
    "\1\333\1\332\1\333\5\0\1\333\1\334\1\0\26\333"+
    "\17\0\1\333\1\334\1\333\5\0\1\335\1\334\1\0"+
    "\26\335\17\0\1\335\1\334\1\335\5\0\1\335\1\336"+
    "\1\0\26\335\17\0\1\335\1\336\1\335\5\0\1\337"+
    "\1\336\1\0\26\337\17\0\1\337\1\336\1\337\5\0"+
    "\1\337\1\340\1\0\26\337\17\0\1\337\1\340\1\337"+
    "\5\0\1\341\1\340\1\0\26\341\17\0\1\341\1\340"+
    "\1\341\5\0\1\341\1\342\1\0\26\341\17\0\1\341"+
    "\1\342\1\341\5\0\1\343\1\342\1\0\26\343\17\0"+
    "\1\343\1\342\1\343\5\0\1\343\1\344\1\0\26\343"+
    "\17\0\1\343\1\344\1\343\5\0\1\345\1\344\1\0"+
    "\26\345\17\0\1\345\1\344\1\345\5\0\1\345\1\346"+
    "\1\0\26\345\17\0\1\345\1\346\1\345\5\0\1\347"+
    "\1\346\1\0\26\347\17\0\1\347\1\346\1\347\5\0"+
    "\1\347\1\350\1\0\26\347\17\0\1\347\1\350\1\347"+
    "\5\0\1\351\1\350\1\0\26\351\17\0\1\351\1\350"+
    "\1\351\5\0\1\351\1\352\1\0\26\351\17\0\1\351"+
    "\1\352\1\351\5\0\1\353\1\352\1\0\26\353\17\0"+
    "\1\353\1\352\1\353\5\0\1\353\1\354\1\0\26\353"+
    "\17\0\1\353\1\354\1\353\5\0\1\355\1\354\1\0"+
    "\26\355\17\0\1\355\1\354\1\355\5\0\1\355\1\356"+
    "\1\0\26\355\17\0\1\355\1\356\1\355\5\0\1\357"+
    "\1\356\1\0\26\357\17\0\1\357\1\356\1\357\5\0"+
    "\1\357\1\360\1\0\26\357\17\0\1\357\1\360\1\357"+
    "\5\0\1\361\1\360\1\0\26\361\17\0\1\361\1\360"+
    "\1\361\5\0\1\361\1\362\1\0\26\361\17\0\1\361"+
    "\1\362\1\361\5\0\1\363\1\362\1\0\26\363\17\0"+
    "\1\363\1\362\1\363\5\0\1\363\1\364\1\0\26\363"+
    "\17\0\1\363\1\364\1\363\5\0\1\365\1\364\1\0"+
    "\26\365\17\0\1\365\1\364\1\365\5\0\1\365\1\366"+
    "\1\0\26\365\17\0\1\365\1\366\1\365\5\0\1\367"+
    "\1\366\1\0\26\367\17\0\1\367\1\366\1\367\5\0"+
    "\1\367\1\370\1\0\26\367\17\0\1\367\1\370\1\367"+
    "\5\0\1\371\1\370\1\0\26\371\17\0\1\371\1\370"+
    "\1\371\5\0\1\371\1\372\1\0\26\371\17\0\1\371"+
    "\1\372\1\371\5\0\1\373\1\372\1\0\26\373\17\0"+
    "\1\373\1\372\1\373\5\0\1\373\1\374\1\0\26\373"+
    "\17\0\1\373\1\374\1\373\5\0\1\375\1\374\1\0"+
    "\26\375\17\0\1\375\1\374\1\375\5\0\1\375\1\376"+
    "\1\0\26\375\17\0\1\375\1\376\1\375\5\0\1\377"+
    "\1\376\1\0\26\377\17\0\1\377\1\376\1\377\5\0"+
    "\1\377\1\u0100\1\0\26\377\17\0\1\377\1\u0100\1\377"+
    "\5\0\1\u0101\1\u0100\1\0\26\u0101\17\0\1\u0101\1\u0100"+
    "\1\u0101\5\0\1\u0101\1\u0102\1\0\26\u0101\17\0\1\u0101"+
    "\1\u0102\1\u0101\5\0\1\u0103\1\u0102\1\0\26\u0103\17\0"+
    "\1\u0103\1\u0102\1\u0103\5\0\1\u0103\1\u0104\1\0\26\u0103"+
    "\17\0\1\u0103\1\u0104\1\u0103\5\0\1\u0105\1\u0104\1\0"+
    "\26\u0105\17\0\1\u0105\1\u0104\1\u0105\5\0\1\u0105\1\u0106"+
    "\1\0\26\u0105\17\0\1\u0105\1\u0106\1\u0105\5\0\1\u0107"+
    "\1\u0106\1\0\26\u0107\17\0\1\u0107\1\u0106\1\u0107\5\0"+
    "\1\u0107\1\u0108\1\0\26\u0107\17\0\1\u0107\1\u0108\1\u0107"+
    "\5\0\1\u0109\1\u0108\1\0\26\u0109\17\0\1\u0109\1\u0108"+
    "\1\u0109\5\0\1\u0109\1\u010a\1\0\26\u0109\17\0\1\u0109"+
    "\1\u010a\1\u0109\5\0\1\u010b\1\u010a\1\0\26\u010b\17\0"+
    "\1\u010b\1\u010a\1\u010b\5\0\1\u010b\1\u010c\1\0\26\u010b"+
    "\17\0\1\u010b\1\u010c\1\u010b\5\0\1\u010d\1\u010c\1\0"+
    "\26\u010d\17\0\1\u010d\1\u010c\1\u010d\5\0\1\u010d\1\u010e"+
    "\1\0\26\u010d\17\0\1\u010d\1\u010e\1\u010d\5\0\1\u010f"+
    "\1\u010e\1\0\26\u010f\17\0\1\u010f\1\u010e\1\u010f\5\0"+
    "\1\u010f\1\u0110\1\0\26\u010f\17\0\1\u010f\1\u0110\1\u010f"+
    "\5\0\1\u0111\1\u0110\1\0\26\u0111\17\0\1\u0111\1\u0110"+
    "\1\u0111\5\0\1\u0111\2\0\26\u0111\17\0\1\u0111\1\0"+
    "\1\u0111\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\1\11\15\1\1\11\1\0\50\1"+
    "\3\0\3\1\1\0\2\1\1\0\1\1\1\11\31\1"+
    "\1\0\1\1\1\0\226\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /*Ignore*/
          }
        case 9: break;
        case 8: 
          { lexeme=yytext(); return OperadorReservado;
          }
        case 10: break;
        case 7: 
          { lexeme=yytext(); return Reservada;
          }
        case 11: break;
        case 5: 
          { lexeme=yytext(); return Operador;
          }
        case 12: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 13: break;
        case 1: 
          { return Error;
          }
        case 14: break;
        case 6: 
          { lexeme=yytext(); return Error;
          }
        case 15: break;
        case 3: 
          { lexeme=yytext(); return Literal;
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
